<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>table.Count( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=table.Count">Search on GitHub</a> - <a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/table.lua#L159">View Source</a> - <a href="/page/Special:WhatLinksHere/table/Count" title="Special:WhatLinksHere/table/Count">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">3</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">4.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length (<b>#</b>) operator.
</p><p>If you only want to test if the table is empty or not, use <a href="/page/Category_colon_table" title="Category:table">table</a>.<a href="/page/table/IsEmpty" title="table/IsEmpty">IsEmpty</a> instead as it is a lot faster.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a> tbl</span>
</p>
<div style="margin-left: 32px;">
The table to count the keys of.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a></span>
</p>
<div style="margin-left: 32px;">
The number of keyvalue pairs. This includes non-numeric and non-sequential keys, unlike the length (<b>#</b>) operator.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>There are 4 keys in this table. So it will output "4"
</p>
<pre><code data-language="lua">local Table = { A = &quot;1&quot;, B = &quot;2&quot;, C = &quot;3&quot;, D = &quot;4&quot; }

print( table.Count( Table ) )</code></pre>
<p><b>Output:</b>
</p>
<pre class="plain">4</code></pre>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Difference between the length (<b>#</b>) operator and this function.
</p><p>The length (<b>#</b>) operator is generally considered faster, but has limitations.
</p>
<pre><code data-language="lua">local Table = { A = &quot;1&quot;, B = &quot;2&quot;, C = &quot;3&quot;, D = &quot;4&quot; }

print( table.Count( Table ), #Table ) -- #Table will return 0 because the table contains no numeric keys

local Table2 = { &quot;test1&quot;, &quot;test2&quot;, &quot;test3&quot; } -- 1 = &quot;test1&quot;, 2 = &quot;test2&quot;

print( table.Count( Table2 ), #Table2 ) -- Both will be 3

Table2[ 5 ] = &quot;test5&quot; -- Insert a new value at index 5, so index 4 does not exist

-- table.Count here will return correct value, #Table2 will return 3 because
-- the new value is non sequential ( there is nothing at index 4 )
print( table.Count( Table2 ), #Table2 )</code></pre>
<p><b>Output:</b>
</p>
<pre class="plain">4 0
3 3
4 3</code></pre>


