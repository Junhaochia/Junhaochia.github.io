<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>hook.Call( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=hook.Call">Search on GitHub</a> - <a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/modules/hook.lua#L62-L125">View Source</a> - <a href="/page/Special:WhatLinksHere/hook/Call" title="Special:WhatLinksHere/hook/Call">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">5</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_3"><span class="tocnumber">8</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_3"><span class="tocnumber">8.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Calls all hooks associated with the given event until one returns something other than nil, and then returns that data.
</p><p>In almost all cases, you should use <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Run" title="hook/Run">Run</a> instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> eventName</span>
</p>
<div style="margin-left: 32px;">
The event to call hooks for</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a> gamemodeTable</span>
</p>
<div style="margin-left: 32px;">
If the gamemode is specified, the gamemode hook within will be called, otherwise not</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_vararg" title="Category:vararg">vararg</a> args</span>
</p>
<div style="margin-left: 32px;">
The arguments to be passed to the hooks</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_vararg" title="Category:vararg">vararg</a></span>
</p>
<div style="margin-left: 32px;">
Return data from called hooks. Limited to 6 return values</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Runs function DoSomething, which eventually calls the event "DoneDoingSomething", triggering the hooked function DoSomethingElse.
</p>
<pre><code data-language="lua">function DoSomething()
    --Does something
    hook.Call(&quot;DoneDoingSomething&quot;)
end

function DoSomethingElse()
    --Does something else, once the hook DoneDoingSomething is called.
    print(&quot;Done!&quot;)
end
hook.Add( &quot;DoneDoingSomething&quot;, &quot;Does something else&quot;, DoSomethingElse )

DoSomething()</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">Done!</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>You can also make custom functions controllable via hooks.
</p>
<pre><code data-language="lua">function MakeCheese()
    local shouldMakeCheese = hook.Call(&quot;MakeCheezPleez&quot;)

    if shouldMakeCheese then
        print(&quot;yay&quot;)
    else
        print(&quot;nay&quot;)
    end
end

function MakeCheeseOrNot()
    if #player.GetAll() &gt;= 1 then
        return true
    else
        return false
    end
end
hook.Add( &quot;MakeCheezPleez&quot;, &quot;Does something else&quot;, MakeCheeseOrNot )

MakeCheese()</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">If there is players in the server, we print "yay". If there isn't, we print "nay"</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_3">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_3">Example</span></h2>
<p>Calls the event "DoneDoingSomething" with args
</p>
<pre><code data-language="lua">hook.Add(&quot;DoneDoingSomething&quot;, &quot;Does something else&quot;, function(a, b)
	print(a)
	print(b)
end)


hook.Call(&quot;DoneDoingSomething&quot;, nil, &quot;Hello&quot;, &quot;Hey&quot;)</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">Hello
Hey</div>


