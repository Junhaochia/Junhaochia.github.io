<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>hook.Add( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=hook.Add">Search on GitHub</a> - <a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/modules/hook.lua#L23">View Source</a> - <a href="/page/Special:WhatLinksHere/hook/Add" title="Special:WhatLinksHere/hook/Add">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_3"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_3"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Add a hook to be called upon the given event occurring.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> eventName</span>
</p>
<div style="margin-left: 32px;">
The event to hook on to, see <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM Hooks</a> and <a href="/page/Category_colon_SANDBOX_Hooks" title="Category:SANDBOX Hooks">Sandbox Hooks</a></div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_any" title="Category:any">any</a> identifier</span>
</p>
<div style="margin-left: 32px;">
<p>The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier <b>should</b> be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
</p><p>The identifier can be either a <a href="/page/Category_colon_string" title="Category:string">string</a>, or a <a href="/page/Category_colon_table" title="Category:table">table</a>/object with an IsValid function defined such as an <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a> or <a href="/page/Category_colon_Panel" title="Category:Panel">Panel</a>. <a href="/page/Category_colon_number" title="Category:number">numbers</a> and <a href="/page/Category_colon_boolean" title="Category:boolean">booleans</a>, for example, are not allowed.
</p>
If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_function" title="Category:function">function</a> func</span>
</p>
<div style="margin-left: 32px;">
<p>The function to be called, arguments given to it depend on the <a href="/page/Category_colon_Hooks" title="Category:Hooks">hook</a>.
</p>
<table cellspacing="0" class="gmodwiki_note warning_note">
<tr>
<td>WARNING
</td>
<td>
<p>Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.<br />It WILL break other addons.
</p>
</td></tr></table></div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.
</p>
<pre><code data-language="lua">local function onThink()
	print( &quot;onThink has been called&quot; )
end

hook.Add( &quot;Think&quot;, &quot;Some unique name&quot;, onThink )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">"onThink has been called" repeating continuously.</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>This works the same as above, but defines the function inside hook.Add rather than above it.
</p>
<pre><code data-language="lua">hook.Add( &quot;Think&quot;, &quot;Another unique name&quot;, function()
	print( &quot;Think has been called&quot; )
end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">"Think has been called" repeating continuously.</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_3">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_3">Example</span></h2>
<p>This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function
</p>
<pre><code data-language="lua">local myTable = {}
function myTable:IsValid()
    return true
end

function myTable:PlayerInitialSpawn(ply)
    print( &quot;CustomHook&quot;, self, ply )
end

hook.Add( &quot;CustomHook&quot; , myTable , myTable.PlayerInitialSpawn )
hook.Run( &quot;CustomHook&quot; )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">"CustomHook table: 0x00000000 Player [1][PotatoMan]"</div>


