<p>Making an entity editable is a lot easier than you would think. To edit an entity in realtime in sandbox mode (or your own gamemode if you have it enabled), you simply hold C (context menu) and right click on the entity. A submenu appears, and choosing properties will show a window like the one below.
</p>
<div class="center"><div class="floatnone"><a href="/page/File:entity_editor_example.jpg" class="image"><img alt="entity editor example.jpg" src="/images/0/0f/entity_editor_example.jpg" width="346" height="305" /></a></div></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Mark_it_as_editable"><span class="tocnumber">1</span> <span class="toctext">Mark it as editable</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Data_Tables"><span class="tocnumber">2</span> <span class="toctext">Data Tables</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#KeyName"><span class="tocnumber">2.1</span> <span class="toctext">KeyName</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Edit"><span class="tocnumber">2.2</span> <span class="toctext">Edit</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Types"><span class="tocnumber">3</span> <span class="toctext">Types</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Generic"><span class="tocnumber">3.1</span> <span class="toctext">Generic</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Boolean"><span class="tocnumber">3.2</span> <span class="toctext">Boolean</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Float"><span class="tocnumber">3.3</span> <span class="toctext">Float</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Int"><span class="tocnumber">3.4</span> <span class="toctext">Int</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#VectorColor"><span class="tocnumber">3.5</span> <span class="toctext">VectorColor</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Combo"><span class="tocnumber">3.6</span> <span class="toctext">Combo</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#Advanced"><span class="tocnumber">4</span> <span class="toctext">Advanced</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Mark_it_as_editable">Mark it as editable</span></h1>
<p>The first thing to do is to mark it as editable.
</p>
<pre><code data-language="lua">ENT.Editable = true</code></pre>
<p>Simple enough?
</p>
<h1> <span class="mw-headline" id="Data_Tables">Data Tables</span></h1>
<p>The rest of the magic happens in <a href="/page/ENTITY/SetupDataTables" title="ENTITY/SetupDataTables">ENT:SetupDataTables</a> - where you're hopefully already defining your network variables for you entity. It probably looks something like this right now.
</p>
<pre><code data-language="lua">
function ENT:SetupDataTables()

	self:NetworkVar( &quot;Float&quot;,	0, &quot;FogStart&quot; )
	self:NetworkVar( &quot;Float&quot;,	1, &quot;FogEnd&quot; )
	self:NetworkVar( &quot;Float&quot;,	2, &quot;Density&quot; )
	self:NetworkVar( &quot;Vector&quot;,	0, &quot;FogColor&quot; )

end
</code></pre>
<p>So all you need to do is add options to the end of each of these.
</p>
<pre><code data-language="lua">
function ENT:SetupDataTables()

	self:NetworkVar( &quot;Float&quot;,	0, &quot;FogStart&quot;,	{ KeyName = &quot;fogstart&quot;,	Edit = { type = &quot;Float&quot;,		order = 1, min = 0, max = 1000000 } } )
	self:NetworkVar( &quot;Float&quot;,	1, &quot;FogEnd&quot;,	{ KeyName = &quot;fogend&quot;,	Edit = { type = &quot;Float&quot;,		order = 2, min = 0, max = 1000000 } } )
	self:NetworkVar( &quot;Float&quot;,	2, &quot;Density&quot;,	{ KeyName = &quot;density&quot;,	Edit = { type = &quot;Float&quot;,		order = 3, min = 0, max = 1 } } )
	self:NetworkVar( &quot;Vector&quot;,	0, &quot;FogColor&quot;,	{ KeyName = &quot;fogcolor&quot;,	Edit = { type = &quot;VectorColor&quot;,	order = 4 } } )

end
</code></pre>
<p>This might seem a bit complicated, but it's simple really.
</p><p>We have a table with:
</p>
<h2> <span class="mw-headline" id="KeyName">KeyName</span></h2>
<p>This defines the key-value name of this variable. This is the standard way in Source to handle networked entity variables, and is required for editing to work. As a bonus, it will also allow map-makers to create maps containing your entity and set these variables.
</p>
<h2> <span class="mw-headline" id="Edit"> Edit </span></h2>
<p>This is a subtable describing how to edit this variable. The actual contents of this table differs with each type of variable, and are described below.
</p>
<h1> <span class="mw-headline" id="Types">Types</span></h1>
<p>These variables are shared between all "edit types":
</p>
<ul><li> <b>title</b> - a string - the title to show to the left of the control. If unset it will default to the control name. This must be unique to each item.
</li><li> <b>order</b> - a number - will display the lowest orders first.
</li><li> <b>category</b> - a string - controls are grouped by category (defaults to "Main")
</li></ul>
<h2> <span class="mw-headline" id="Generic">Generic</span></h2>
<p>A simple text box.
</p>
<ul><li> <b>waitforenter</b> - boolean, whether the value should be updated in real-time as the user types, or only when they press enter. (default: false)
</li></ul>
<h2> <span class="mw-headline" id="Boolean">Boolean</span></h2>
<p>This type is a simple checkbox. There's no other settings in here apart from the shared values.
</p>
<h2> <span class="mw-headline" id="Float">Float</span></h2>
<p>This provides the client with a number slider.
</p>
<ul><li> <b>min</b> - The minimum value (defaults to 0)
</li><li> <b>max</b> - The maximum value (defaults to 1)
</li></ul>
<h2> <span class="mw-headline" id="Int">Int</span></h2>
<p>Identical to <b>Float</b> but only lets you choose integers.
</p>
<h2> <span class="mw-headline" id="VectorColor">VectorColor</span></h2>
<p>This provides the client with a colour selector - which is represented by a Vector. Each colour's range is between 0-1.
</p>
<h2> <span class="mw-headline" id="Combo">Combo</span></h2>
<p>This is a ComboBox.
</p>
<ul><li> text = the default selection. (default: "Select...")
</li><li> values = a key/value table of available options in the ComboBox. Keys are the identifier string, values are the associated actual values. Required.
</li></ul>
<h1> <span class="mw-headline" id="Advanced">Advanced</span></h1>
<p>The property editors are modular, and are defined in lua/vgui/ - each starting with prop_*.
</p><p>Creating your own should be quite simple by looking at these files.
</p>


