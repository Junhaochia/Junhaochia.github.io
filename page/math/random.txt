<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>math.random( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=math.random">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/math/random" title="Special:WhatLinksHere/math/random">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">4</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
</p><p>When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.
</p><p>When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.
</p><p>See also <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/Rand" title="math/Rand">Rand</a>
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> m=nil</span>
</p>
<div style="margin-left: 32px;">
<p>If m is the only parameter: upper limit.<br />
If n is also provided: lower limit.
</p>
If provided, this must be an integer.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> n=nil</span>
</p>
<div style="margin-left: 32px;">
<p>Upper limit.
</p>
If provided, this must be an integer.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a></span>
</p>
<div style="margin-left: 32px;">
Random value</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Generate a random number between 1 and 400 with both math.random and math.Rand.
</p>
<pre><code data-language="lua">print(math.random(1,400))

print(math.Rand(1,400))</code></pre>
<p><b>Output:</b>
</p>
<pre class="plain">317
1.0162317198768</code></pre>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Select a random key from a table, where the keys have a different probability of being selected.
</p>
<pre><code data-language="lua">function GetWeightedRandomKey(tab)
	local sum = 0

	for _, chance in pairs(tab) do
		sum = sum + chance
	end

	local select = math.random() * sum

	for key, chance in pairs(tab) do
		select = select - chance
		if select &lt; 0 then return key end
	end
end

-- Example usage:
local fruit = {
	Grape = 4.5,
	Orange = 20,
	Banana = 3.14
}

for i = 1, 5 do
	print(GetWeightedRandomKey(fruit))
end</code></pre>
<p><b>Output:</b>
</p>
<pre class="plain">Banana
Grape
Banana
Orange
Orange</code></pre>


