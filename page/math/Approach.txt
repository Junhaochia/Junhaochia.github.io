<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>math.Approach( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=math.Approach">Search on GitHub</a> - <a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/math.lua#L174-L190">View Source</a> - <a href="/page/Special:WhatLinksHere/math/Approach" title="Special:WhatLinksHere/math/Approach">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">5</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Gradually approaches the target value by the specified amount.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> current</span>
</p>
<div style="margin-left: 32px;">
The value we're currently at.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> target</span>
</p>
<div style="margin-left: 32px;">
The target value. This function will never overshoot this value.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> change</span>
</p>
<div style="margin-left: 32px;">
The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a></span>
</p>
<div style="margin-left: 32px;">
New current value, closer to the target than it was previously.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Demonstrates what this function does
</p>
<pre><code data-language="lua">print( math.Approach( 0, 5, 1 ) ) -- attempts to increment 0 by 1, 0 + 1 is less than 5 so returns 1
print( math.Approach( 4, 5, 3 ) ) -- attempts to increment 4 by 3, 4 + 3 = 7 is greater than 5 so returns 5</code></pre>
<p><b>Output:</b>
</p>
<pre class="plain">1
5</code></pre>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Common usage example of this function with a control variable.
</p>
<pre><code data-language="lua">local MyNumber = 0
local Target = 0
local LastThink = 0
local ChangeRate = 1

hook.Add( &quot;Think&quot;, &quot;math.Approach Example&quot;, function()
	local now = CurTime()
	local timepassed = now - LastThink
	LastThink = now

	MyNumber = math.Approach( MyNumber, Target, ChangeRate * timepassed )

	-- Normally, you would use MyNumber in code that appears here.
end )

-- The following functions are for example only:
function GetMyNumber()
	return MyNumber
end

function SetMyNumberTarget( newtarget )
	Target = newtarget
end

function SetMyNumberChangeRate( newrate )
	ChangeRate = newrate
end</code></pre>
<p><br />
</p>


