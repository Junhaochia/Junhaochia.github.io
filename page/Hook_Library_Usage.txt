<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#What_is_the_hook_library.3F"><span class="tocnumber">1</span> <span class="toctext">What is the hook library?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Using_the_hook_library"><span class="tocnumber">2</span> <span class="toctext">Using the hook library</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Adding_hooks"><span class="tocnumber">2.1</span> <span class="toctext">Adding hooks</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Hook_functions"><span class="tocnumber">2.2</span> <span class="toctext">Hook functions</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Gamemodes_and_hooks"><span class="tocnumber">2.3</span> <span class="toctext">Gamemodes and hooks</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Returning_from_hooks"><span class="tocnumber">2.4</span> <span class="toctext">Returning from hooks</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Adding_your_own_events"><span class="tocnumber">2.5</span> <span class="toctext">Adding your own events</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="What_is_the_hook_library.3F"> What is the hook library? </span></h1>
<p>The hook library allows scripts to interact with game or user created events. It allows you to "hook" a function onto an event created with <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Run" title="hook/Run">Run</a> or <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Call" title="hook/Call">Call</a> and run code when that events happens that either works independently or modifies the event's arguments. This is the preferred method instead of overriding functions to add your own code into it.
</p>
<h1> <span class="mw-headline" id="Using_the_hook_library"> Using the hook library </span></h1>
<h2> <span class="mw-headline" id="Adding_hooks"> Adding hooks </span></h2>
<p>To add a hook you use the <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Add" title="hook/Add">Add</a> function. This function takes the following arguments:
</p>
<ol><li> <b>Event Name</b> - This is the name of the event to run your hook on.
</li><li> <b>Hook ID</b> - This is an identifier unique to the hook you are adding and can be used to remove the hook later.
</li><li> <b>Hook Function</b> - This is the function that is ran upon the event.
</li></ol>
<p>Below is an example of adding a hook to print to the console whenever a player spawns:
</p>
<pre><code data-language="lua">hook.Add(&quot;PlayerSpawn&quot;, &quot;Spawn_Notification&quot;, function(ply)
    print(ply:Name() .. &quot; has spawned!&quot;)
end)</code></pre>
<p>It can also be written this way
</p>
<pre><code data-language="lua">
local function spawnPrint(ply)
    print(ply:Name() .. &quot; has spawned!&quot;)
end

hook.Add(&quot;PlayerSpawn&quot;, &quot;Spawn_Notification&quot;, spawnPrint)</code></pre>
<p>This will print "{PlayerName} has spawned!" in to the console whenever a player spawns.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>Hook ID's can be strings, panels or entities. If a panel or entity is given and becomes invalid, the hook is removed
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>Hooks added with <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Add" title="hook/Add">Add</a> are not ordered in any way
</p>
</td></tr></table>
<h2> <span class="mw-headline" id="Hook_functions"> Hook functions</span></h2>
<p>When a hook is called, it is given arguments specific to its event. Information for each hook can be found on this wiki at <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">Category:GM_Hooks</a> and <a href="/page/Category_colon_SANDBOX_Hooks" title="Category:SANDBOX Hooks">Category:SANDBOX_Hooks</a>. Some hooks will be given no arguments at all.
</p>
<h2> <span class="mw-headline" id="Gamemodes_and_hooks"> Gamemodes and hooks </span></h2>
<p>Functions under the GM (or GAMEMODE) table are also treated as hooks. When an event is being ran, all hooks defined using <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Add" title="hook/Add">Add</a> are called before the Gamemode function.
</p><p>This means that the following code within a gamemode will also print to the console whenever a player spawns:
</p>
<pre><code data-language="lua">function GM:PlayerSpawn(ply)
	print(ply:Name() .. &quot; has spawned!&quot;)
end</code></pre>
<h2> <span class="mw-headline" id="Returning_from_hooks"> Returning from hooks </span></h2>
<p>When a value is returned from a hook, other hooks for the same event do not run. This means that you are able to override other hooks and gamemode functions.
</p><p>This example shows the use of the <a href="/page/Category_colon_SANDBOX_Hooks" title="Category:SANDBOX Hooks">SANDBOX</a>:<a href="/page/SANDBOX/PlayerSpawnProp" title="SANDBOX/PlayerSpawnProp">PlayerSpawnProp</a> event. This event expects hooks to return true if the player is allowed to spawn a prop and false otherwise. If nothing is returned it'll run the next hook.
</p>
<pre><code data-language="lua">hook.Add(&quot;PlayerSpawnProp&quot;, &quot;Admin_Props&quot;, function(ply, model)
	if (ply:IsAdmin()) then
		return true
	end

	return false
end)</code></pre>
<p>This code will only allow admins to spawn props. As it is always returning a value, it overrides other hooks.
</p>
<h2> <span class="mw-headline" id="Adding_your_own_events"> Adding your own events </span></h2>
<p>You can add your own events by simply calling <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Run" title="hook/Run">Run</a> or <a href="/page/Category_colon_hook" title="Category:hook">hook</a>.<a href="/page/hook/Call" title="hook/Call">Call</a>. You shouldn't need to create a hook for every event that happens in your addons as that would be useless but important things such as a gamemode checking for a map switch or events that you want external scripts to edit should have hooks.
</p><p>The following example calls all hooks that are hooked to the "PerformMultiplication" event and supplied an argument to each hook.
</p>
<pre><code data-language="lua">hook.Add(&quot;PerformMultiplication&quot;, &quot;Multiply_Obob&quot;, function(a, b)
	return (a * b)
end)
    
local returnedValue = hook.Run(&quot;PerformMultiplication&quot;, 3, 4)
print(returnedValue)</code></pre>
<p>This example will output 12
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>It is advised not to trigger default hooks unless you know what you are doing
</p>
</td></tr></table>


