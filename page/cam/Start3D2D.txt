<div class="function_line">
<span class="client" title="Client">&#160;</span>cam.Start3D2D( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=cam.Start3D2D">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/cam/Start3D2D" title="Special:WhatLinksHere/cam/Start3D2D">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Sets up a new 2D rendering context. Must be finished by <a href="/page/Category_colon_cam" title="Category:cam">cam</a>.<a href="/page/cam/End3D2D" title="cam/End3D2D">End3D2D</a>. This function pushes a new matrix onto the stack. (<a href="/page/Category_colon_cam" title="Category:cam">cam</a>.<a href="/page/cam/PushModelMatrix" title="cam/PushModelMatrix">PushModelMatrix</a>)
</p><p>
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is a function that starts a 2D rendering context.<br />This means that the only rendering functions will work after it are <a href="/page/Category_colon_2D_Rendering_Functions" title="Category:2D Rendering Functions">functions with a 2D rendering context</a>.
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is a rendering function that requires a 3D rendering context.<br />This means that it will only work in <a href="/page/Category_colon_3D_Rendering_Hooks" title="Category:3D Rendering Hooks">hooks with a 3D rendering context</a>.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_Vector" title="Category:Vector">Vector</a> pos</span>
</p>
<div style="margin-left: 32px;">
Origin of the 3D2D context, ie. the top left corner, (0, 0).</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_Angle" title="Category:Angle">Angle</a> angles</span>
</p>
<div style="margin-left: 32px;">
<p>Angles of the 3D2D context.<br />
+x in the 2d context corresponds to +x of the angle (its forward direction).<br />
+y in the 2d context corresponds to -y of the angle (its right direction).
</p>
If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> scale</span>
</p>
<div style="margin-left: 32px;">
<p>The scale of the render context.
</p>
If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<pre><code data-language="lua">hook.Add(&quot;PostDrawOpaqueRenderables&quot;, &quot;example&quot;, function()
	local trace = LocalPlayer():GetEyeTrace()
	local angle = trace.HitNormal:Angle()
		
	render.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Forward(), Color( 255, 0, 0 ), true )
	render.DrawLine( trace.HitPos, trace.HitPos + 8 * -angle:Right(), Color( 0, 255, 0 ), true )
	render.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Up(), Color( 0, 0, 255 ), true )
		
	cam.Start3D2D( trace.HitPos, angle, 1 )
		surface.SetDrawColor( 255, 165, 0, 255 )
		surface.DrawRect( 0, 0, 8, 8 )
		render.DrawLine( Vector( 0, 0, 0 ), Vector( 8, 8, 8 ), Color( 100, 149, 237, 255 ), true )
	cam.End3D2D()
end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><a href="/page/File:cam.Start3D2D_example_1.png" class="image"><img alt="cam.Start3D2D example 1.png" src="/images/c/ca/cam.Start3D2D_example_1.png" width="434" height="249" /></a></div>


