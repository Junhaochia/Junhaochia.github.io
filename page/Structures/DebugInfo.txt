<div style="float:right;font-size:10px; font-weight: 100; margin: 0px 0px 10px 10px;"><a href="/page/Special:WhatLinksHere/Structures/DebugInfo" title="Special:WhatLinksHere/Structures/DebugInfo">What links here?</a></div>Table returned by <a href="/page/Category_colon_debug" title="Category:debug">debug</a>.<a href="/page/debug/getinfo" title="debug/getinfo">getinfo</a>.
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>If a filter is applied to <a href="/page/Category_colon_debug" title="Category:debug">debug</a>.<a href="/page/debug/getinfo" title="debug/getinfo">getinfo</a>, some members may not exist!
</p>
</td></tr></table>
<p>For functions defined in C/C++, the following members will always have the given values:
</p>
<ul><li> what = "C"
</li><li> source = "[C]"
</li><li> nparams = 0
</li><li> isvararg = true
</li><li> namewhat = ""
</li><li> short_src = "[C]"
</li><li> linedefined = -1
</li><li> currentline = -1
</li><li> lastlinedefined = -1
</li></ul>
<p><br /><br />
</p>
<table class="wikitable sortable" border="1">
<tr>
<th scope="col"> Type
</th>
<th scope="col"> Name
</th>
<th scope="col"> Description
</th></tr>
<tr>
<td> <a href="/page/Category_colon_function" title="Category:function">function</a>
</td>
<td> func
</td>
<td>
<p>Reference to the function that was passed in. If a stack level was specified, this will be the function at that stack level. 0 = debug.getinfo, 1 = function that called debug.getinfo, etc.
</p><p><b>Option: f</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_number" title="Category:number">number</a>
</td>
<td> linedefined
</td>
<td>
<p>The line where the function definiton starts (where "function" is located).
</p><p><b>Option: S</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_number" title="Category:number">number</a>
</td>
<td> lastlinedefined
</td>
<td>
<p>The line the function definition ended (where "end" is located).
</p><p><b>Option: S</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_string" title="Category:string">string</a>
</td>
<td> source
</td>
<td>
<p>The path to the file where the passed function is defined prepended by an @ (ex. "@lua/autorun/mytestfile.lua"). This will be the <a href="/page/Global/CompileString" title="Global/CompileString">CompileString</a> or <a href="/page/Global/RunString" title="Global/RunString">RunString</a> identifier if the function wasn't defined in a file, also prepended by an @.
</p><p><b>Option: S</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_string" title="Category:string">string</a>
</td>
<td> short_src
</td>
<td>
<p>The shortened name of the source (without the @). May be truncated if the source path is long.
</p><p><b>Option: S</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_string" title="Category:string">string</a>
</td>
<td> what
</td>
<td>
<p>The language used. Either "Lua" or "C".
</p><p><b>Option: S</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_number" title="Category:number">number</a>
</td>
<td> currentline
</td>
<td>
<p>The current line. This will be -1 if the code is not executed from a file.
</p><p><b>Option: l</b> (lowercase L)
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_string" title="Category:string">string</a>
</td>
<td> name
</td>
<td>
<p>The function name. This will be nil if the name cannot be found. Only works if stack level is passed rather than function pointer.
</p><p><b>Option: n</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_string" title="Category:string">string</a>
</td>
<td> namewhat
</td>
<td>
<p>The function "type". This will be "global", "local", "method", "field". Can also be an empty string if the function name could not be found. Only works if stack level is passed rather than function pointer.
</p><p><b>Option: n</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_boolean" title="Category:boolean">boolean</a>
</td>
<td> isvararg
</td>
<td>
<p>Whether the function is variadic (has a <kbd>...</kbd> argument).
</p><p><b>Option: u</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_number" title="Category:number">number</a>
</td>
<td> nparams
</td>
<td>
<p>The number of arguments the function uses excluding varargs.
</p><p><b>Option: u</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_number" title="Category:number">number</a>
</td>
<td> nups
</td>
<td>
<p>Upvalue count. Max index that can be used with <a href="/page/Category_colon_debug" title="Category:debug">debug</a>.<a href="/page/debug/getupvalue" title="debug/getupvalue">getupvalue</a>. C functions can have upvalues but they cannot be accessed from Lua.
</p><p><b>Option: u</b>
</p>
</td></tr>
<tr>
<td> <a href="/page/Category_colon_table" title="Category:table">table</a>
</td>
<td> activelines
</td>
<td>
<p>A table of all the active lines in the function - that is, lines with code that actually does something (not blank lines or lines with comments only).
</p><p>The table keys will be line numbers, and their values will all be true. Lines that are inactive are simply not included in the table - they have the value nil.
</p><p>It doesn't check for activeline in subfunctions.
</p><p><b>Option: L</b>
</p>
</td></tr></table>


