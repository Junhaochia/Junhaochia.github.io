<div class="function_line">
<span class="client" title="Client">&#160;</span>util.GetModelMeshes( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=util.GetModelMeshes">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/util/GetModelMeshes" title="Special:WhatLinksHere/util/GetModelMeshes">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">5</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Returns a table of visual meshes of given model.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This does not work on brush models (<b>*&lt;number&gt;</b> models)
</p>
</td></tr></table>
<p>See also <a href="/page/Category_colon_ENTITY_Hooks" title="Category:ENTITY Hooks">ENTITY</a>:<a href="/page/ENTITY/GetRenderMesh" title="ENTITY/GetRenderMesh">GetRenderMesh</a>.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> model</span>
</p>
<div style="margin-left: 32px;">
The full path to a model to get the visual meshes of.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> lod=0</span>
</p>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> bodygroupMask=0</span>
</p>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a></span>
</p>
<div style="margin-left: 32px;">
<p>A table of tables with the following format:
</p>
<ul><li> <a href="/page/Category_colon_string" title="Category:string">string</a> material - The material of the specific mesh
</li><li> <a href="/page/Category_colon_table" title="Category:table">table</a> triangles - A table of <a href="/page/Structures/MeshVertex" title="Structures/MeshVertex">MeshVertex structures</a> ready to be fed into <a href="/page/Category_colon_IMesh" title="Category:IMesh">IMesh</a>:<a href="/page/IMesh/BuildFromTriangles" title="IMesh/BuildFromTriangles">BuildFromTriangles</a>
</li><li> <a href="/page/Category_colon_table" title="Category:table">table</a> verticies - A table of <a href="/page/Structures/MeshVertex" title="Structures/MeshVertex">MeshVertex structures</a> representing all the vertexes of the mesh. This table is used internally to generate the "triangles" table.
</li></ul>
<p>Each <a href="/page/Structures/MeshVertex" title="Structures/MeshVertex">MeshVertex structure</a> returned also has an extra table of tables field called "weights" with the following data:
</p>
<ul><li> <a href="/page/Category_colon_number" title="Category:number">number</a> boneID - The bone this vertex is attached to
</li><li> <a href="/page/Category_colon_number" title="Category:number">number</a> weight - How "strong" this vertex is attached to the bone. A vertex can be attached to multiple bones at once.</div>
</li></ul>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Simple example usage on a Scripted Entity.
</p>
<pre><code data-language="lua">-- The default material to render with in case we for some reason don't have one
local myMaterial = Material( &quot;models/wireframe&quot; ) -- models/debug/debugwhite

function ENT:CreateMesh()
	-- Destroy any previous meshes
	if ( self.Mesh ) then self.Mesh:Destroy() end

	-- Get a list of all meshes of a model
	local visualMeshes = util.GetModelMeshes( &quot;models/combine_helicopter/helicopter_bomb01.mdl&quot; )

	-- Check if the model even exists
	if (&#160;!visualMeshes ) then return end

	-- Select the first mesh
	local visualMesh = visualMeshes[ 1 ]

	-- Set the material to draw the mesh with from the model data
	myMaterial = Material( visualMesh.material )

	-- You can apply any changes to visualMesh.trianges table here, distorting the mesh
	-- or any other changes you can come up with

	-- Create and build the mesh
	self.Mesh = Mesh()
	self.Mesh:BuildFromTriangles( visualMesh.triangles )
end

-- A special hook to override the normal mesh for rendering
function ENT:GetRenderMesh()
	-- If the mesh doesn't exist, create it!
	if (&#160;!self.Mesh ) then return self:CreateMesh() end

	return { Mesh = self.Mesh, Material = myMaterial }
end

function ENT:Draw()
	-- Draw the entity's model normally, this calls GetRenderMesh at some point
	self:DrawModel()
end</code></pre>
<p><br />
</p>


