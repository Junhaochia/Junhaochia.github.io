<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Benefits_over_basic_chatbox.3F"><span class="tocnumber">1</span> <span class="toctext">Benefits over basic chatbox?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Getting_started"><span class="tocnumber">2</span> <span class="toctext">Getting started</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Setting_up"><span class="tocnumber">2.1</span> <span class="toctext">Setting up</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Adding_hooks"><span class="tocnumber">2.2</span> <span class="toctext">Adding hooks</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#chat.AddText"><span class="tocnumber">2.3</span> <span class="toctext">chat.AddText</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Restoring_functionality"><span class="tocnumber">2.4</span> <span class="toctext">Restoring functionality</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#Finishing"><span class="tocnumber">3</span> <span class="toctext">Finishing</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="#Summary"><span class="tocnumber">3.1</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Examples"><span class="tocnumber">3.2</span> <span class="toctext">Examples</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Benefits_over_basic_chatbox.3F"> Benefits over <a href="/page/Basic_Chatbox" title="Basic Chatbox">basic chatbox</a>? </span></h1>
<p>Making a chat box using this method is slightly harder and requires a little more attention to detail but it gives you full control over the chatbox as opposed to just simply reskinning it. You can add buttons, image panels, and more by basically coding the chatbox from the bottom up.
</p>
<h1> <span class="mw-headline" id="Getting_started"> Getting started </span></h1>
<h2> <span class="mw-headline" id="Setting_up"> Setting up </span></h2>
<p>Same set up as the basic chatbox... DFrame, DTextEntry, RichText and a table.
</p>
<pre><code data-language="lua">
myChat = {}

myChat.dFrame = ...
myChat.dTextEntry = ...
myChat.dRichText = ...
</code></pre>
<p>Here is a basic run down of how this type of chat box works by Facepunch user <a rel="nofollow" class="external text" href="http://facepunch.com/member.php?u=235325">PortalGod</a>
</p>
<ul><li> <i>Disable "messagemode" in <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/PlayerBindPress" title="GM/PlayerBindPress">PlayerBindPress</a>, open vgui chatbox and focus its text entry instead.</i>
</li><li> <i>In textentry:OnEnter (or OnKeyCodePressed and check for enter), RunConsoleCommand("say", textentry:GetText()) and hide the chatbox.</i>
</li><li> <i>Hijack <a href="/page/Category_colon_chat" title="Category:chat">chat</a>.<a href="/page/chat/AddText" title="chat/AddText">AddText</a> and parse the arguments yourself (see RichText), call the original chat.AddText inside it though for colored console text</i>
</li></ul>
<h2> <span class="mw-headline" id="Adding_hooks"> Adding hooks </span></h2>
<p>The first thing you need to do is override function called when the player's chat binds are pressed, you do this in a PlayerBindPress hook. This will prevent the default chat box from appearing when the player presses their chat keys. In this function is where you would open up your chat box and I would highly recommend you add a boolean argument to it for team chat. It would be bad if your players tried to talk to their team and it went global
</p>
<pre><code data-language="lua">hook.Add(&quot;PlayerBindPress&quot;, &quot;overrideChatbind&quot;, function( ply, bind, pressed )
    local bTeam = false
    if bind == &quot;messagemode&quot; then
        print(&quot;global chat&quot;)
    elseif bind == &quot;messagemode2&quot; then
        print(&quot;team chat&quot;)
        bTeam = true
    else
        return
    end

    myChat.openChatbox( bTeam )

    return true -- Doesn't allow any functions to be called for this bind
end)</code></pre>
<p>Now you want to display messages for stuff like sv_cheats being changed or a player leaving the game, that kind of stuff is important.
</p>
<pre><code data-language="lua">hook.Add(&quot;ChatText&quot;, &quot;serverNotifications&quot;, function( index, name, text, type )
    if type == &quot;joinleave&quot; or type == &quot;none&quot; then
        myChat.dRichText:AppendText( text..&quot;\n&quot; )
    end
end)
</code></pre>
<p>Lastly you should also hide the default chat messages since you will add your own to your chat box
</p>
<pre><code data-language="lua">hook.Add(&quot;HUDShouldDraw&quot;, &quot;noMoreDefault&quot;, function( name )
	if name == &quot;CHudChat&quot; then
		return false
	end
end)
</code></pre>
<h2> <span class="mw-headline" id="chat.AddText"> chat.AddText </span></h2>
<p>If you do not override chat.AddText, all the calls to that function will appear in the default chatbox which you have hidden. We want the player to see this so we will override the original function with one of our own. The source code for this function is not available, it likely isn't in Lua, so we will save the old function and just call that. You might notice that the arguments are ellipses (...), this is a deprecated Lua functionality that gLua has called varargs that basically means you can pass pretty much any number of arguments to that function.
</p>
<pre><code data-language="lua">
local oldAddText = chat.AddText
function chat.AddText(...)
	local args = {...} -- Create a table of varargs

	for _, obj in pairs( args ) do
		if type(obj) == &quot;table&quot; then -- We were passed a color object
			myChat.dRichText:InsertColorChange( obj.r, obj.g, obj.b, 255 )
		elseif type(obj) == &quot;string&quot;  then -- This is just a string
			myChat.dRichText:AppendText( obj )
		elseif obj:IsPlayer() then
			local col = GAMEMODE:GetTeamColor( obj ) -- Get the player's team color
			myChat.dRichText:InsertColorChange( col.r, col.g, col.b, 255 ) -- Make their name that color
			myChat.dRichText:AppendText( obj:Nick() )
		end
	end

	-- Gotta end our line for this message
	myChat.dRichText:AppendText( &quot;\n&quot; )

	-- Call the original function
	oldAddText (...)
end
</code></pre>
<h2> <span class="mw-headline" id="Restoring_functionality"> Restoring functionality </span></h2>
<p>Now that we have overridden the default chat box with one of our own, the hooks that are called by the default chat box won't be called anymore. We need to fix this.
</p><p>In your chat box's text entry, you need to tell the player to say the text so the proper gamemode hooks are called for that. It would also be a good idea to make sure that the Escape key closes your chat box so we account for that too
</p>
<pre><code data-language="lua">
myChat.dTextEntry.OnKeyCodeTyped = function( self, code )
	if code == KEY_ESCAPE then
		-- Work around to hide the chatbox when the client presses escape
		myChat.closeChatbox()
		gui.HideGameUI()
	elseif code == KEY_ENTER then
		-- Replicate the client pressing enter
		if string.Trim( self:GetText() )&#160;!= &quot;&quot; then
			LocalPlayer():ConCommand(&quot;say &quot;..self:GetText())
		end
		
		myChat.closeChatbox()
	end
end
</code></pre>
<p>When opening the chat box you are going to want to call the function for that even and then make sure your DTextEntry is available to be typed in
</p>
<pre><code data-language="lua">
function myChat.openChatbox()
	-- Stuff

	-- MakePopup calls the input functions so we don't need to call those
	myChat.dFrame:MakePopup()
	myChat.dTextEntry:RequestFocus()

	gamemode.Call(&quot;StartChat&quot;)

	-- More stuff
end
</code></pre>
<p>When the player closes your chat box you need to make sure they can move around again and that once again the proper gamemode function are called.
</p>
<pre><code data-language="lua">
function myChat.closeChatbox()
	-- Stuff

	-- Give the player control again
	myChat.dFrame:SetMouseInputEnabled( false )
	myChat.dFrame:SetKeyboardInputEnabled( false )
	gui.EnableScreenClicker( false )
	
	-- We are done chatting
	gamemode.Call(&quot;FinishChat&quot;)
	
	-- Clear the text entry
	myChat.dTextEntry:SetText( &quot;&quot; )
	gamemode.Call( &quot;ChatTextChanged&quot;, &quot;&quot; )

	-- More stuff
end
</code></pre>
<p><br />
</p>
<h1> <span class="mw-headline" id="Finishing"> Finishing </span></h1>
<h2> <span class="mw-headline" id="Summary"> Summary </span></h2>
<p>Although this is quick and covers very little code wise, it should hopefully be a useful tool for anyone looking to code their own chatbox and add their own spin to it. It contains the basics of what is used to create a chatbox of this scale without any of the visual code, a backend of sorts. This doesn't do anything fancy by default like having embeddable images or any of that, but it is possible using this as a base
</p>
<h2> <span class="mw-headline" id="Examples"> Examples </span></h2>
<p>Exho's Chatbox - <a rel="nofollow" class="external free" href="https://github.com/Exho1/eChat">https://github.com/Exho1/eChat</a>
</p>


