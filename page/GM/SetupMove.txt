<div class="function_line">
<span class="shared" title="Shared">&#160;</span>GM:SetupMove( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=GM.SetupMove">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/GM/SetupMove" title="Special:WhatLinksHere/GM/SetupMove">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>SetupMove is called before the engine process movements. This allows us to override the players movement.
</p><p>See <a href="/page/Game_Movement" title="Game Movement">Game Movement</a> for an explanation on the move system.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This hook is <a href="/page/Prediction" title="Prediction">predicted</a>. This means that in singleplayer, it will <i>not</i> be called in the Client realm.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_Player" title="Category:Player">Player</a> ply</span>
</p>
<div style="margin-left: 32px;">
The player whose movement we are about to process</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_CMoveData" title="Category:CMoveData">CMoveData</a> mv</span>
</p>
<div style="margin-left: 32px;">
The move data to override/use</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_CUserCmd" title="Category:CUserCmd">CUserCmd</a> cmd</span>
</p>
<div style="margin-left: 32px;">
The command data</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Make drowning even more entertaining:
</p>
<pre><code data-language="lua">hook.Add( &quot;SetupMove&quot;, &quot;Drowning:HandleWaterInLungs&quot;, function( ply, mv, cmd )
	if ( ply:WaterLevel() &gt; 2 ) then
		mv:SetUpSpeed( -100 )
		cmd:SetUpMove( -100 )
	end
end )</code></pre>
<p><br />
</p>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Disable the player's ability to jump by removing a key from CMoveData:
</p>
<pre><code data-language="lua">local CMoveData = FindMetaTable(&quot;CMoveData&quot;)

function CMoveData:RemoveKeys(keys)
	-- Using bitwise operations to clear the key bits.
	local newbuttons = bit.band(self:GetButtons(), bit.bnot(keys))
	self:SetButtons(newbuttons)
end

hook.Add(&quot;SetupMove&quot;, &quot;Disable Jumping&quot;, function(ply, mvd, cmd)
	if mvd:KeyDown(IN_JUMP) then
		mvd:RemoveKey(IN_JUMP)
	end
end)</code></pre>
<p><br />
</p>


