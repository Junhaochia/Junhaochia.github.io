<div class="function_line">
<span class="shared" title="Shared">&#160;</span>GM:Move( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=GM.Move">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/GM/Move" title="Special:WhatLinksHere/GM/Move">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">4</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>The Move hook is called for you to manipulate the player's MoveData.
</p><p>You shouldn't adjust the player's position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.
</p><p>Generally you shouldn't have to use this hook - if you want to make a custom move type you should look at the drive system.
</p><p>This hook is called after <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/PlayerTick" title="GM/PlayerTick">PlayerTick</a>.
</p><p>See <a href="/page/Game_Movement" title="Game Movement">Game Movement</a> for an explanation on the move system.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This hook is <a href="/page/Prediction" title="Prediction">predicted</a>. This means that in singleplayer, it will <i>not</i> be called in the Client realm.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_Player" title="Category:Player">Player</a> ply</span>
</p>
<div style="margin-left: 32px;">
Player</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_CMoveData" title="Category:CMoveData">CMoveData</a> mv</span>
</p>
<div style="margin-left: 32px;">
Movement information</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_boolean" title="Category:boolean">boolean</a></span>
</p>
<div style="margin-left: 32px;">
Return true to suppress default engine action</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>A noclip move type
</p>
<pre><code data-language="lua">function GM:Move( ply, mv )

	--
	-- Set up a speed, go faster if shift is held down
	--
	local speed = 0.0005 * FrameTime()
	if ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end

	--
	-- Get information from the movedata
	--
	local ang = mv:GetMoveAngles()
	local pos = mv:GetOrigin()
	local vel = mv:GetVelocity()

	--
	-- Add velocities. This can seem complicated. On the first line
	-- we're basically saying get the forward vector, then multiply it
	-- by our forward speed (which will be &gt; 0 if we're holding W, &lt; 0 if we're
	-- holding S and 0 if we're holding neither) - and add that to velocity.
	-- We do that for right and up too, which gives us our free movement.
	--
	vel = vel + ang:Forward() * mv:GetForwardSpeed() * speed
	vel = vel + ang:Right() * mv:GetSideSpeed() * speed
	vel = vel + ang:Up() * mv:GetUpSpeed() * speed

	--
	-- We don't want our velocity to get out of hand so we apply
	-- a little bit of air resistance. If no keys are down we apply
	-- more resistance so we slow down more.
	--
	if ( math.abs(mv:GetForwardSpeed()) + math.abs(mv:GetSideSpeed()) + math.abs(mv:GetUpSpeed()) &lt; 0.1 ) then
	vel = vel * 0.90
	else
	vel = vel * 0.99
	end

	--
	-- Add the velocity to the position (this is the movement)
	--
	pos = pos + vel

	--
	-- We don't set the newly calculated values on the entity itself
	-- we instead store them in the movedata. They should get applied
	-- in the FinishMove hook.
	--
	mv:SetVelocity( vel )
	mv:SetOrigin( pos )

	--
	-- Return true to not use the default behavior
	--
	return true

end</code></pre>
<p><br />
</p>


