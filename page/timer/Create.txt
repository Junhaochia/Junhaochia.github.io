<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>timer.Create( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=timer.Create">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/timer/Create" title="Special:WhatLinksHere/timer/Create">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_4"><span class="tocnumber">5</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Creates a new timer that will repeat its function given amount of times.
This function also requires the timer to be named, which allows you to control it after it was created via the <a href="/page/Category_colon_timer" title="Category:timer">timer library</a>.
</p><p>For a simple one-time timer with no identifiers, see <a href="/page/Category_colon_timer" title="Category:timer">timer</a>.<a href="/page/timer/Simple" title="timer/Simple">Simple</a>.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>Timers use <a href="/page/Global/CurTime" title="Global/CurTime">CurTime</a> for timing.
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note warning_note">
<tr>
<td>WARNING
</td>
<td>
<p>Timers won't advance while the client is timing out from the server.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> identifier</span>
</p>
<div style="margin-left: 32px;">
Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> delay</span>
</p>
<div style="margin-left: 32px;">
The delay interval in seconds. If the delay is too small, the timer will fire on the next frame/tick.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> repetitions</span>
</p>
<div style="margin-left: 32px;">
The number of times to repeat the timer. Enter 0 for infinite repetitions.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_4">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_function" title="Category:function">function</a> func</span>
</p>
<div style="margin-left: 32px;">
Function called when timer has finished the countdown.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Creates a timer that has a 1 second delay and is only ran once ('UniqueName1'), a timer that has a 2 second delay and is ran continuously ('UniqueName2'), etc.
</p><p>This shows the different ways you can interact with functions.
</p>
<pre><code data-language="lua">local function PrintSomething( text )
	print( text )
end

local function PrintNoArguments()
	print( &quot;fun with timers!&quot; )
end

local function CreateSomeTimers( )
	timer.Create( &quot;UniqueName1&quot;, 1, 1, function() print(&quot;inside&quot;) end )
	timer.Create( &quot;UniqueName2&quot;, 2, 0, function() PrintSomething(&quot;outside&quot;) end )
	timer.Create( &quot;UniqueName3&quot;, 5, 1, PrintNoArguments )
end
hook.Add( &quot;Initialize&quot;, &quot;Timer Example&quot;, CreateSomeTimers )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">inside -- 1 second
<p>outside -- 2 seconds
</p><p>outside -- 4 seconds
</p><p>fun with timers! -- 5 seconds
</p><p>outside -- 6 seconds
</p>
outside -- 8 seconds</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Creates a timer that has 0.01 second delay, to demonstrate that the "minimum" delay of a timer is locked at the tickrate period (1/66 seconds).
</p><p>(As the example below shows, by setting the delay rate to 1/100 (0.01 seconds), the difference in time between the iterations of the timer should be 0.01 seconds, but instead, it is 0.149 (1/66) seconds).
</p>
<pre><code data-language="lua">local tick = {} 
local tick_key = 1 

local function MinimumTimerDelay()	
	local current_time = CurTime() 
	if tick_key &gt; 1 then 
		print( &quot;Timer Iteration #&quot; .. tick_key - 1 .. &quot; had a delay of &quot; .. current_time - tick[tick_key - 1])
	end
	tick[tick_key] = current_time 
	tick_key = tick_key + 1	
end

local function Timer()
	timer.Create(&quot;Timer Delay&quot;, (1/100), 10, MinimumTimerDelay ) 
end

hook.Add(&quot;Initialize&quot;, &quot;Commence Timers&quot;, Timer)</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">Timer Iteration #1 had a delay of 0.014999389648438
<p>Timer Iteration #2 had a delay of 0.014999389648438
</p><p>Timer Iteration #3 had a delay of 0.014999389648438
</p><p>Timer Iteration #4 had a delay of 0.0150146484375
</p><p>Timer Iteration #5 had a delay of 0.014999389648438
</p><p>Timer Iteration #6 had a delay of 0.014999389648438
</p><p>Timer Iteration #7 had a delay of 0.014999389648438
</p><p>Timer Iteration #8 had a delay of 0.014999389648438
</p>
Timer Iteration #9 had a delay of 0.014999389648438</div>


