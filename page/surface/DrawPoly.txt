<div class="function_line">
<span class="client_m" title="Client and Menu">&#160;</span>surface.DrawPoly( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=surface.DrawPoly">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/surface/DrawPoly" title="Special:WhatLinksHere/surface/DrawPoly">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">3.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">4.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Draws a textured polygon (secretly a triangle fan) with a maximum of 256 vertices.
Only works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.
</p><p>Unlike most surface library functions, non-integer coordinates are not rounded.
</p>
<table cellspacing="0" class="gmodwiki_note warning_note">
<tr>
<td>WARNING
</td>
<td>
<p>You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is a rendering function that requires a 2D rendering context.<br />This means that it will only work in <a href="/page/Category_colon_2D_Rendering_Hooks" title="Category:2D Rendering Hooks">hooks with a 2D rendering context</a>.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a> vertices</span>
</p>
<div style="margin-left: 32px;">
<p>A table containing integer vertices. See the <a href="/page/Structures/PolygonVertex" title="Structures/PolygonVertex">PolygonVertex structure</a>.
</p>
<b>The vertices must be in clockwise order.</b></div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Draws a red triangle in the top left corner of the screen.
</p>
<pre><code data-language="lua">local triangle = {
	{ x = 100, y = 200 },
	{ x = 150, y = 100 },
	{ x = 200, y = 200 }
}

hook.Add(&quot;HUDPaint&quot;, &quot;PolygonTest&quot;, function()
	
	surface.SetDrawColor( 255, 0, 0, 255 )
	draw.NoTexture()
	surface.DrawPoly( triangle )

end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><a href="/page/File:draw_poly.png" class="image"><img alt="draw poly.png" src="/images/e/ee/draw_poly.png" width="116" height="117" /></a></div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>A helper function to draw a circle using surface.DrawPoly.
</p>
<pre><code data-language="lua">function draw.Circle( x, y, radius, seg )
	local cir = {}

	table.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )
	for i = 0, seg do
		local a = math.rad( ( i / seg ) * -360 )
		table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )
	end

	local a = math.rad( 0 ) -- This is needed for non absolute segment counts
	table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )

	surface.DrawPoly( cir )
end

hook.Add(&quot;HUDPaint&quot;, &quot;PolygonCircleTest&quot;, function()
	
	surface.SetDrawColor( 0, 0, 0, 200)
	draw.NoTexture()
	draw.Circle( ScrW() / 2, ScrH() / 2, 200, math.sin( CurTime() ) * 20 + 25 )

	--Usage:
	--draw.Circle( x, y, radius, segments )

end )</code></pre>
<p><br />
</p>


