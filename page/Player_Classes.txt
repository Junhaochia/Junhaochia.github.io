<p>Player classes can be changed and swapped at runtime. They change things like the player's speed, height, the weapons the player spawns with, what happens when they die, what happens when they spawn etc.
</p><p>Imagine a Team Fortress 2 gamemode. You want the Scout to run faster than the HWG. So you would design different classes for them. When a player spawns you set their class - and they have those attributes.
</p><p>Player classes can be derived. So your gamemode can define a shared common class for all of your players and derive different classes from there.
</p><p>You can find a list of default fields <a href="/page/Structures/PLAYER" title="Structures/PLAYER">here</a>.
</p>
<h2> <span class="mw-headline" id="Why"> Why </span></h2>
<p>Traditionally if you wanted to do this in your gamemode you would either code a system similar to this, or you would end up with a bunch of if/else blocks in your spawn functions.
</p><p>This system cleans that up by making it unified and object orientated.
</p>
<h2> <span class="mw-headline" id="Setting_a_player.27s_class"> Setting a player's class </span></h2>
<p>Setting a player's class is done easily. You only need to do it serverside.
</p>
<pre><code data-language="lua">player_manager.SetPlayerClass( ply, "player_sandbox" )
</code></pre>
<p>This is commonly done in the PlayerSpawn gamemode hook - but you can call it anywhere you want.
</p>
<h2> <span class="mw-headline" id="A_Player_Class"> A Player Class </span></h2>
<p>The player class itself doesn't need much comment. It should be mostly self explanatory.
</p><p>The class below creates a new player class called "player_custom", which is derived from "player_default". The player spawns with a pistol.
</p>
<pre><code data-language="lua">DEFINE_BASECLASS( "player_default" )

local PLAYER = {} 

--
-- See gamemodes/base/player_class/player_default.lua for all overridable variables
--
PLAYER.WalkSpeed 			= 200
PLAYER.RunSpeed				= 400


function PLAYER:Loadout()

	self.Player:RemoveAllAmmo()
	
	self.Player:GiveAmmo( 256,	"Pistol", 		true )
	self.Player:Give( "weapon_pistol" )

end

player_manager.RegisterClass( "player_custom", PLAYER, "player_default" )
</code></pre>
<p>These player class functions are usually housed in gamemode/player_class/ - and they do not get loaded automatically. You should load it in your shared.lua gamemode file. And they should be loaded in the right order - so that base classes get loaded before their children.
</p>


