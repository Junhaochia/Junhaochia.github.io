<p>Trigonometry is a really useful tool to have in your coder's utility belt, and lots of people have a hard time grasping Sine and Cosine (and Tangent), so here's a crash course tutorial on their use.
</p><p>Trigonometry is the math of <i>right triangles</i> and <i>circles</i>.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#SOH.2C_CAH.2C_TOA"><span class="tocnumber">1</span> <span class="toctext">SOH, CAH, TOA</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Unit_Circle"><span class="tocnumber">2</span> <span class="toctext">Unit Circle</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Inverse_Functions"><span class="tocnumber">3</span> <span class="toctext">Inverse Functions</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Conclusion"><span class="tocnumber">4</span> <span class="toctext">Conclusion</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="SOH.2C_CAH.2C_TOA"> SOH, CAH, TOA </span></h2>
<p>First, let's look at <b>SOH</b>, <b>CAH</b>, <b>TOA</b>:
</p><p><b>SOH</b> = <b>S</b>ine equals <b>O</b>pposite over <b>H</b>ypotenuse
<b>CAH</b> = <b>C</b>osine equals <b>A</b>djacent over <b>H</b>ypotenuse
<b>TOA </b>= <b>T</b>angent equals <b>O</b>pposite over <b>A</b>djacent
</p><p>But what does this mean?
</p><p>The <b>Hypotenuse</b> of a right triangle is the longest of the three sides. It's always on the opposite end of the right angle. The other two sides aren't uniquely named.
</p><p><a href="/page/File:hypotenuse.gif" class="image"><img alt="hypotenuse.gif" src="/images/5/52/hypotenuse.gif" width="445" height="311" /></a>
</p><p>So depending on our situation, we can use one of the three equations to find out all we need to know about a right triangle. All we need is the length of one of the three sides and the degree of one of the two non-right angles. Refer to this diagram (not to scale):
</p><p><a href="/page/File:sohcahtoa.png" class="image"><img alt="sohcahtoa.png" src="/images/9/90/sohcahtoa.png" width="600" height="200" /></a>
</p><p>If we replace those sides with <i>a</i> and <i>b</i>, with the Hypotenuse being <i>c</i>, with the angle we know being <i>ang</i>, we can use this equation to find the length of side <i>b</i>. Here is a Lua example:
</p>
<pre>
local a = 8
local b -- we're going to find out b. This is our &quot;Opposite&quot; side.
local c = 16
local ang = 30

ang = math.rad( ang ) -- Turn our degrees into radians. This is a requirement for Lua. Don't worry too much about it now.

-- Remember Sine equals Opposite over Hypotenuse.
-- That is, the sine of the angle is equal to the opposite leg's length divided by the Hypotenuse's length.
-- math.sin( ang ) == b / c

-- Here is the same equation, solved for b:
b = math.sin( ang ) * c

-- Lua will calculate the sin of ang, as such:
-- math.sin(  math.rad( 30 ) ) = .5

print( b == .5 * 16 )
--Will output true.
</pre>
<p>Believe it or not, these basic right triangle calculations have [U]SO MANY USES[/U].
Over <i>2200</i> years ago, mathematicians used these functions to calculate the radius of Earth. It's used literally every second of every day in GPS software (hence the term triangulation). It's used by police to track the location of a phone call. <b>SOH CAH TOA is the foundation of Trigonometry</b>.
</p><p>The three trigonometric functions are <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/sin" title="math/sin">sin</a>, <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/cos" title="math/cos">cos</a>, and <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/tan" title="math/tan">tan</a>.
</p>
<h2> <span class="mw-headline" id="Unit_Circle"> Unit Circle </span></h2>
<p>When we investigate the origins of Sine and Cosine, we can learn a thing or two about the fundamental properties of a circle. Consider the following:
</p><p><a href="/page/File:unitcircle.png" class="image"><img alt="unitcircle.png" src="/images/b/b7/unitcircle.png" width="800" height="600" /></a>
</p><p>We have a circle with radius 1. In this circle, we have radius line which is tilted 30 degrees (counterclockwise, always counterclockwise) from the circle's right horizontal axis. Because it is a radius line, its length is equal to the radius of the circle, which is 1 in this case.
</p><p>So what is the length of b? If we recall SOH, we see that <b>Sin( ang ) = Opposite / Hypotenuse</b>. Plug in our values, and Sin( 30 ) = b / 1.
Seeing as how any number divided by 1 is itself, we can conclude that:
</p><p>In a circle of radius 1, the <b>Y-value</b> of a point on a circle relative to the center of the circle is equal to the <b>sine</b> of the angle.
In a circle of radius 1, the <b>X-value</b> of a point on a circle relative to the center of the circle is equal to the <b>cosine</b> of the angle.
</p><p>That is,
</p>
<pre>
y = math.sin( ang )
x = math.cos( ang )
</pre>
<p>Which we can see here:
<a href="/page/File:jvzRYnC.gif" class="image"><img alt="jvzRYnC.gif" src="/images/3/31/jvzRYnC.gif" width="700" height="700" /></a>
</p><p>But not all circles are of radius 1. When we have a circle that is larger than radius 1, we just multiply.
</p>
<pre>
y = math.sin( ang ) * radius
x = math.cos( ang ) * radius
</pre>
<p>Furthermore, we've been assuming that our circle is centered at point (0,0). If our circle's center is (100,453), we add.
This is our complete formula:
</p>
<pre>
y = math.sin( ang ) * radius + originY
x = math.cos( ang ) * radius + originX
</pre>
<p>This is useful in GLua for drawing circles, arranging props in circles, and basically any other circle-based code.
Here is an example which draws squares:
</p>
<pre>
function PointOnCircle( ang, radius, offX, offY )
	ang =  math.rad( ang )
	local x = math.cos( ang ) * radius + offX
	local y = math.sin( ang ) * radius + offY
	return x, y
end


local numSquares = 36 --How many squares do we want to draw?
local interval = 360 / numSquares
local centerX, centerY = 200, 500
local radius = 120

hook.Add(&quot;HUDPaint&quot;,&quot;Draw a circle of boxes!&quot;, function()

	for degrees = 1, 360, interval do --Start at 1, go to 360, and skip forward at even intervals.
		
		local x, y = PointOnCircle( degrees, radius, centerX, centerY )
		
		draw.RoundedBox( 4, x, y, 30, 30, Color(255,255,0) )
		
	end
	
end)
</pre>
<p>Result:
</p><p><a href="/page/File:circleboxes.png" class="image"><img alt="circleboxes.png" src="/images/c/cd/circleboxes.png" width="287" height="287" /></a>
</p><p>WOW! SO USEFUL!
Radial menus, circular health bars, <a rel="nofollow" class="external text" href="https://steamcommunity.com/sharedfiles/filedetails/?id=382065862">chairs arranged around a circular table</a>, ellipses, sound waves, and <i>MUCH MORE</i> are possible with Trigonometry.
</p><p><br />
</p>
<h2> <span class="mw-headline" id="Inverse_Functions"> Inverse Functions </span></h2>
<p>The inverse function of a Trigonometric function is called the arc-function.
</p><p>The three inverse trigonometric functions are <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/asin" title="math/asin">asin</a>, <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/acos" title="math/acos">acos</a>, and <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/atan" title="math/atan">atan</a> or <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/atan2" title="math/atan2">atan2</a>.
</p><p>Arc functions work like so:
</p>
<pre>
--The following two equations are equivalent:
sin( a ) = b / c
a = arcsin( b / c )

--The following two equations are equivalent:
cos( a ) = b / c
a = arccos( b / c )
</pre>
<p>These are useful for doing reverse math, for example:
</p>
<pre>
-- We know the length of A and B, and we want to find angle THETA, which is adjacent to B
local A = 2
local B = 4
-- sin( ang ) == A / B
-- ang == arcsin( A / B )
local ang = math.asin( A / B )
print(ang) -- Outputs 30; sin( 30 ) == .5 == 2/4 == A/B
</pre>
<p>These functions are useful if the unknown variable in question is your angle. There is a special Arc-Tangent function for programming called <a href="/page/Category_colon_math" title="Category:math">math</a>.<a href="/page/math/atan2" title="math/atan2">atan2</a>.
</p><p>Think of tan(ang) as giving the slope - the rise over the run - of a line. So:
</p>
<pre>
tan( ang ) = y / x
ang = atan( y / x )
</pre>
<p>However, when performing y/x, calculating 3/4 gives the same answer as calculating -3/-4. Likewise -3/4 gives the same answer as 3/-4. So we have atan2(y,x) that handles the individual signs correctly and prevents a divide-by-zero/infinity error.
</p>
<pre>
ang = atan2( y, x )
</pre>
<p>atan2's use is to get the angle of a line with a slope <i>m</i> as in the equation <i>y</i> = <i>mx</i> + <i>b</i>
</p><p><a href="/page/File:atan.png" class="image"><img alt="atan.png" src="/images/4/4c/atan.png" width="441" height="404" /></a>
</p>
<h2> <span class="mw-headline" id="Conclusion"> Conclusion </span></h2>
<p>Trigonometry is required to create any circular structure, and to do math with right triangles. It is also useful to find the angle of a line given its slope.
</p><p>I hope you learned something <i>useful</i> here!
</p><p><a rel="nofollow" class="external text" href="http://facepunch.com/showthread.php?t=1450530">View this tutorial on Facepunch.</a>
</p>


