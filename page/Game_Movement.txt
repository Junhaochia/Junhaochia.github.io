<p>Getting your head around how the game movement system works isn't easy. This page will try to clarify on what goes on.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#User_Command"><span class="tocnumber">1</span> <span class="toctext">User Command</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#SetupMove"><span class="tocnumber">2</span> <span class="toctext">SetupMove</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Move"><span class="tocnumber">3</span> <span class="toctext">Move</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#FinishMove"><span class="tocnumber">4</span> <span class="toctext">FinishMove</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#The_Drive_System"><span class="tocnumber">5</span> <span class="toctext">The Drive System</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="User_Command"> User Command </span></h1>
<p>The client creates a user command (<a href="/page/Category_colon_CUserCmd" title="Category:CUserCmd">CUserCmd</a>) which is created by looking at the player's keys and mouse activity. This is done in the <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/CreateMove" title="GM/CreateMove">CreateMove</a> and <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/StartCommand" title="GM/StartCommand">StartCommand</a> hooks.
</p><p>This user command is then sent to the server where StartCommand is again run. In a multiplayer game the user command is also used directly locally to predict the player's movement.
</p><p>StartCommand is a good place to change controls (prevent movement, etc) since everything else down the line depends on what happens there and it is run on both the client and server which is necessary to prevent clients from bypassing your changes.
</p><p><br />
</p>
<h1> <span class="mw-headline" id="SetupMove"> SetupMove </span></h1>
<p>The <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/SetupMove" title="GM/SetupMove">SetupMove</a> hook is used to transfer data from the user command to a <a href="/page/Category_colon_CMoveData" title="Category:CMoveData">CMoveData</a> structure, and set the origin/velocity of the entity you're moving (probably the player). The user command's job is then finished.
</p><p>This is called on the server - and also in multiplayer - on the client. If prediction is happening properly then given an identical user command on client/server - the outputted move data should be identical too.
</p>
<h1> <span class="mw-headline" id="Move"> Move </span></h1>
<p>The <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/Move" title="GM/Move">Move</a> hook does the brunt of the work. It should <i>only</i> change the move data structure. This is because SetupMove and Move can be called multiple times to work out prediction errors.
</p><p>So in this hook you would look at the MoveData structure, move its origin based on its other factors (buttons down, velocity etc). You'd also be doing things like collision detection here.
</p>
<pre><code data-language="lua">
function GM:Move( ply, mv )

	-- Get some variables for easy access
	local ang = mv:GetMoveAngles()
	local pos = mv:GetOrigin()

	-- If Jump is pressed, move pos forwards
	if ( mv:KeyDown( IN_JUMP ) ) then pos:Add( ang:Forward() * FrameTime() * 0.001 ) end

	-- Save the calculations back into the origin
	mv:SetOrigin( pos )

	-- Don't do the default
	return true

end
</code></pre>
<h1> <span class="mw-headline" id="FinishMove"> FinishMove </span></h1>
<p>The <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/FinishMove" title="GM/FinishMove">FinishMove</a> hook is where you should apply the changes from the move data onto your entity.
</p>
<pre><code data-language="lua">
function GM:FinishMove( ply, mv )

	--
	-- Move the player to the worked out position
	--
	ply:SetNetworkOrigin( mv:GetOrigin() )

	-- Don't do the default
	return true

end
</code></pre>
<p><br />
</p>
<h1> <span class="mw-headline" id="The_Drive_System"> The Drive System </span></h1>
<p>The <a href="/page/Category_colon_drive" title="Category:drive">drive library</a> system was invented to make this all more modular, and make it so you can control not only the player - but other objects too.
</p>


