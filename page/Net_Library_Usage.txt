<p><b>Before reading this page, please ensure you understand the basics of Lua, or you will get stuck!</b>
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#What_is_the_net_library.3F"><span class="tocnumber">1</span> <span class="toctext">What is the net library?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Using_the_net_library"><span class="tocnumber">2</span> <span class="toctext">Using the net library</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Precaching_messages"><span class="tocnumber">2.1</span> <span class="toctext">Precaching messages</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Receiving_messages"><span class="tocnumber">2.2</span> <span class="toctext">Receiving messages</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Sending_messages"><span class="tocnumber">2.3</span> <span class="toctext">Sending messages</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Transferring_data"><span class="tocnumber">2.4</span> <span class="toctext">Transferring data</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Examples"><span class="tocnumber">2.5</span> <span class="toctext">Examples</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Security"><span class="tocnumber">2.6</span> <span class="toctext">Security</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="What_is_the_net_library.3F"> What is the net library? </span></h1>
<p>The net library is one of a number of ways to send data between the client and server.
</p><p>The major advantages of the net library is the large size limit compared to usermessage and console commands, 65533 bytes (64KiB with 3 bytes of unusable overhead) per message, and the ability to send data backwards - from the client to the server.
</p>
<h1> <span class="mw-headline" id="Using_the_net_library"> Using the net library </span></h1>
<h2> <span class="mw-headline" id="Precaching_messages"> Precaching messages </span></h2>
<p>When you send a net message, you will most likely get an error which contains a shortened URL. This is because the message isn't precached. To precache a message, just call this once server-side:
</p>
<pre><code data-language="lua">util.AddNetworkString("YourMessageName")
</code></pre>
<p>Note: you will need to wait a couple of seconds after precaching before sending the message.
</p>
<h2> <span class="mw-headline" id="Receiving_messages"> Receiving messages </span></h2>
<p>To be able to send data with the net library, there must be something to handle that data when it's received. We use the function <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Receive" title="net/Receive">Receive</a>, which has two arguments: the name of the net message and the callback function to run when the message is received.
</p><p>Below is an example of receiving a net message:
</p>
<pre><code data-language="lua">net.Receive( "MyMessage", function( len, ply )
     print("I got it!")
end)
</code></pre>
<p>Once our net message "MyMessage" is sent, the receiving function is called. The first argument of the receive function is the length of the message (which should mostly be ignored, unless you are debugging or something), the second is the player who sent it, this is only used when <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/SendToServer" title="net/SendToServer">SendToServer</a> is called (see <a href="/page/Net_Library_Usage#Sending_messages" title="Net Library Usage">below</a>).
</p>
<h2> <span class="mw-headline" id="Sending_messages"> Sending messages </span></h2>
<p>Now that we have a function to receive it, we need to send the message.
</p><p>Prior to sending a net message, the string name of the message must be precached once serverside with <a href="/page/Category_colon_util" title="Category:util">util</a>.<a href="/page/util/AddNetworkString" title="util/AddNetworkString">AddNetworkString</a>.
</p>
<pre><code data-language="lua">util.AddNetworkString( "myMessage" )
</code></pre>
<p>Then to start sending a net message, call <a href="/page/net/Start" title="net/Start">net.Start</a> with the name of the message. Then,
</p>
<ul><li> Serverside: Use <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Send" title="net/Send">Send</a>, which has one argument: a <a href="/page/Category_colon_Player" title="Category:Player">Player</a> or a table of players. If you sending to all players, use <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Broadcast" title="net/Broadcast">Broadcast</a>.
</li><li> Clientside: Use <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/SendToServer" title="net/SendToServer">SendToServer</a>.
</li></ul>
<p>For example, if you wanted to send the myMessage net message, you would do
</p>
<pre><code data-language="lua">net.Start("myMessage")
net.Send( Entity( 1 ) )
</code></pre>
<p>The message sent would be empty, next we will look at sending data in net messages. Generally empty net messages are used as a simple way of alerting the player of something that has happened on the server which the client does not know about unless the server tells them about it, for example, after a certain time has passed on the server, an empty net message could be sent to the client to tell them that a menu should be opened.
</p>
<h2> <span class="mw-headline" id="Transferring_data"> Transferring data </span></h2>
<p>To send data, after calling the <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Start" title="net/Start">Start</a> function, you can use the following functions, each for their specified data type:
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteAngle" title="net/WriteAngle">WriteAngle</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteBit" title="net/WriteBit">WriteBit</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteBool" title="net/WriteBool">WriteBool</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteColor" title="net/WriteColor">WriteColor</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteData" title="net/WriteData">WriteData</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteDouble" title="net/WriteDouble">WriteDouble</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteEntity" title="net/WriteEntity">WriteEntity</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteFloat" title="net/WriteFloat">WriteFloat</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteInt" title="net/WriteInt">WriteInt</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteNormal" title="net/WriteNormal">WriteNormal</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteString" title="net/WriteString">WriteString</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteTable" title="net/WriteTable">WriteTable</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteType" title="net/WriteType">WriteType</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteUInt" title="net/WriteUInt">WriteUInt</a>
</p><p><a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteVector" title="net/WriteVector">WriteVector</a>
</p><p>To send the message, use <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Send" title="net/Send">Send</a> on the server, or <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/SendToServer" title="net/SendToServer">SendToServer</a> on the client. You can also send a message to every connected player serverside using <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Broadcast" title="net/Broadcast">Broadcast</a>
</p><p>For reading data, there are functions for each writable type of data above, generally being net.Read(Type).
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>You must read data in the same order that you sent it.
</p>
</td></tr></table>
<p><br />
</p>
<h2> <span class="mw-headline" id="Examples"> Examples </span></h2>
<p>It is recommended you have a basic understanding of hooks before you attempt these.
</p><p>Example 1: Telling the client a player has died.
<a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/PlayerDeath" title="GM/PlayerDeath">PlayerDeath</a> is a hook that is only called serverside. If we want to tell every player that a player has died we can use the net library.
</p><p>Serverside:
</p>
<pre><code data-language="lua">util.AddNetworkString( "PlayerDied" )

hook.Add( "PlayerDeath", "NotifiyClient", function( ply, inf, att )
     if IsValid( ply ) then -- Make sure the dead player exists
          net.Start( "PlayerDied" )
          net.WriteEntity( ply )
          net.Broadcast()
     end
end )
</code></pre>
<p>Clientside:
</p>
<pre><code data-language="lua">net.Receive( "PlayerDied", function()
     local ply = net.ReadEntity()
     chat.AddText( ply, Color( 255, 0, 0 ), "has died!" )
end )
</code></pre>
<p>Explaination:
Since chat.AddText is a function that we can only use on the client we need to find a way to tell the client that a player died. The solution is simple, in the <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/PlayerDeath" title="GM/PlayerDeath">PlayerDeath</a> hook, use <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteEntity" title="net/WriteEntity">WriteEntity</a> to send the entity to the client, read the entity then run chat.AddText with the colors we want.
</p><p>Challenges (Don't progress until you have done these!):
Can you make it tell everyone who the player was killed by?
Can you make it so that it only tells the attacker they killed a player?
</p><p>Example 2: Giving the server information from the client.
We want to know how old the player is, and we also want everyone on the server to know about it. The problem is, VGUI functions can only be called clientside, but don't worry, the net library is here!
</p><p>Clientside:
</p>
<pre><code data-language="lua">local frame = vgui.Create( "DFrame" )
frame:SetSize( 400, 400 )
frame:SetTitle( "What is your age?" )
frame:Center()

local age = vgui.Create( "DNumberWang", frame )
age:Dock( TOP )
age:SetDecimals( 0 )
age:SetMin( 0 )
age:SetMax( 100 )

local send = vgui.Create( "DButton", frame )
send:Dock( TOP )
send:SetText( "Send my age!" )
send.DoClick = function()
    net.Start( "SendAge" )
    net.WriteUInt( age:GetValue(), 8 ) -- You can also use net.WriteInt here. The second argument is 8 since the age will never be above 255. Doing this saves bandwidth and can reduce lag.
    net.SendToServer()
end
</code></pre>
<p>Notice how we don't actually tell the server who we are using <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/WriteEntity" title="net/WriteEntity">WriteEntity</a>. This is because serverside, <a href="/page/Category_colon_net" title="Category:net">net</a>.<a href="/page/net/Receive" title="net/Receive">Receive</a>'s second argument is the player who sent it. We'll go in to more depth about net message security after this example.
</p><p>Serverside:
</p>
<pre><code data-language="lua">util.AddNetworkString( "SendAge" )

net.Receive( "SendAge", function( len, ply ) -- len is the net message length, which we don't care about, ply is the player who sent it.
     local age = net.ReadUInt( 8 ) -- Notice how ReadUInt requires an argument. This is the second argument of WriteUInt, which tells us how big the number is.
     PrintMessage( HUD_PRINTTALK, ply:Nick() .. " is " .. age .. " years old!" )
end )
</code></pre>
<p>Challenges (Don't continue until you have done these!):
Can you make the age message show in color?
Can you make the message also show the players favorite food?
</p>
<h2> <span class="mw-headline" id="Security"> Security </span></h2>
<p>When sending a net message from client to server, you pose a huge security risk. Let's pretend for a moment that someone has written this code serverside:
</p>
<pre><code data-language="lua">util.AddNetworkString( "BanPlayer" )
net.Receive( "BanPlayer", function( len, ply )
     local toBan = net.ReadEntity()
     local time = net.ReadUInt( 32 )
     toBan:Ban( time )
end )
</code></pre>
<p>Take a look at this code. Can you figure out what could happen if this code was actually used on a server?
</p><p>Let's break it down. This net message bans a player when the BanPlayer net message is sent to the server. However, there are no checks to see if the player is actually an admin or not. This means people could send their own net messages, from outside the script that it was created in, gaining access to ban any player on your server. To prevent this, follow 1 simple rule:
</p><p><b>NEVER TRUST THE CLIENT</b>
</p><p>Don't preform checks on user input clientside then assume that they are fine serverside. Don't be lazy and only check data in the realm where it can be easily manipulated. You should look out for negative numbers, people sending net messages very fast, people trying to write entities that should never be written, as long as many other things. Before you publish your code, try as hard as you can to break it.
</p><p>An easy way to secure your Net functions:
When using net.Receive (net.Receive( "my_message", function( len, ply ))) you can use the second argument (ply) (the sender) to perform checks. Never do net.WriteEntity(LocalPlayer()), that's unnecessary and easy to bypass. An easy check could look like this:
</p>
<pre><code data-language="lua">net.Receive("YourNetName", function( len, ply )
	if(&#160;!ply:IsSuperAdmin() ) then return end --leaves the function if the sender isn't superadmin
	print( "This is a secured Net Message!" )
end)
</code></pre>


