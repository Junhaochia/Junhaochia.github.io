<p>Prediction is a technique commonly used in multiplayer games to make the player not feel the lag by simulating his actions as they're sent to the server.
</p><p>For a list of predicted hooks, <a href="/page/Category_colon_Predicted_Hooks" title="Category:Predicted Hooks">click here</a>.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#So_when_I_shoot_at_a_player.2C_is_that_prediction.3F"><span class="tocnumber">1</span> <span class="toctext">So when I shoot at a player, is that prediction?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Why_do_we_need_prediction.3F"><span class="tocnumber">2</span> <span class="toctext">Why do we need prediction?</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Now_explain_that_to_me_in_layman.27s_terms"><span class="tocnumber">3</span> <span class="toctext">Now explain that to me in layman's terms</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#How_is_it_implemented.3F"><span class="tocnumber">4</span> <span class="toctext">How is it implemented?</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#How_powerful_is_prediction.3F"><span class="tocnumber">5</span> <span class="toctext">How powerful is prediction?</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Why_are_the_clientside_predicted_hooks_called_more_times_than_the_server_ones.3F"><span class="tocnumber">6</span> <span class="toctext">Why are the clientside predicted hooks called more times than the server ones?</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#There.E2.80.99s_a_function_called_IsFirstTimePredicted.2C_what_is_it.3F"><span class="tocnumber">7</span> <span class="toctext">There’s a function called IsFirstTimePredicted, what is it?</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#This_prediction_stuff_still_doesn.E2.80.99t_explain_why_my_weapon_glitches_out_when_firing_or_when_the_user_lags.21"><span class="tocnumber">8</span> <span class="toctext">This prediction stuff still doesn’t explain why my weapon glitches out when firing or when the user lags!</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#So.2C_can_I_still_use_timer.Simple_for_my_burst_fire.3F"><span class="tocnumber">9</span> <span class="toctext">So, can I still use timer.Simple for my burst fire?</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#That.27s_stupid.2C_it.27s_redundant_code.2C_timers_are_like_1_line_of_code.21"><span class="tocnumber">10</span> <span class="toctext">That's stupid, it's redundant code, timers are like 1 line of code!</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#Isn.27t_it_expensive_to_have_multiple_checks_like_that_in_a_think_hook.3F"><span class="tocnumber">11</span> <span class="toctext">Isn't it expensive to have multiple checks like that in a think hook?</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#What_is_SuppressHostEvents.3F"><span class="tocnumber">12</span> <span class="toctext">What is SuppressHostEvents?</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#What_should_be_called_serverside_and_what_shouldn.E2.80.99t_with_prediction.3F"><span class="tocnumber">13</span> <span class="toctext">What should be called serverside and what shouldn’t with prediction?</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#Useful_commands"><span class="tocnumber">14</span> <span class="toctext">Useful commands</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#Prediction_examples"><span class="tocnumber">15</span> <span class="toctext">Prediction examples</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="So_when_I_shoot_at_a_player.2C_is_that_prediction.3F"> So when I shoot at a player, is that prediction? </span></h2>
<p>No that’s <a href="/page/Player/LagCompensation" title="Player/LagCompensation">lag compensation</a>, it’s used in conjunction with prediction mainly for weapons.
</p>
<h2> <span class="mw-headline" id="Why_do_we_need_prediction.3F"> Why do we need prediction? </span></h2>
<p>Without prediction any action the player executes would need to be acknowledged by the server first, and then sent back to the player.
</p><p>With prediction the server validates the commands as usual , but in the mean time allows the player to freely move around the world.
</p>
<h2> <span class="mw-headline" id="Now_explain_that_to_me_in_layman.27s_terms"> Now explain that to me in layman's terms </span></h2>
<p>Basically , if you don't want your weapon or movement system to break for players with high ping ( making their view shake and teleport around ) or whenever there's a connection hiccup, you better have prediction support.
</p>
<h2> <span class="mw-headline" id="How_is_it_implemented.3F"> How is it implemented? </span></h2>
<p>Every tick, the player generates a <a href="/page/Category_colon_CUserCmd" title="Category:CUserCmd">CUserCmd</a>, which contains information on what buttons the player pressed and such.
</p><p>As they're sending it to the server, the client starts simulating the movement before a response is received from the server.
</p><p>The global variable <a href="/page/Global/CurTime" title="Global/CurTime">CurTime</a>() is always in sync with the server depending on the player’s ping, in general you should use this for anything delay based in prediction.
</p><p>In singleplayer, the client skips the prediction simulation as he’s also the server, so the response time is pretty much nil (however prediction is still applied when hosting a Listen server ).
</p><p>That means that hooks such as <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/Move" title="GM/Move">Move</a> and <a href="/page/Category_colon_WEAPON_Hooks" title="Category:WEAPON Hooks">WEAPON</a>:<a href="/page/WEAPON/PrimaryAttack" title="WEAPON/PrimaryAttack">PrimaryAttack</a> are <b>NOT</b> called clientside in singleplayer, because there’s no need to.
The only exception to this rule is <a href="/page/Category_colon_WEAPON_Hooks" title="Category:WEAPON Hooks">WEAPON</a>:<a href="/page/WEAPON/Think" title="WEAPON/Think">Think</a> since garry added a hack to make it call clientside even in singleplayer.
</p>
<h2> <span class="mw-headline" id="How_powerful_is_prediction.3F"> How powerful is prediction? </span></h2>
<p>Prediction does not solve everything, it still has heavy limitations which will only be fixed as internet connections will get better and better.
</p><p>Prediction is here to merely mask them while still trying to provide a smooth experience.
</p><p>For instance, let's say you have a ping of 300 and you're equipped with a shield weapon that requires you to hold the mouse down to gain invulnerability.
</p><p>With prediction you're going to see the effects immediately , but on the server your weapon hasn't done anything yet, due to the packets still arriving.
</p><p>If a player shoots you during that timespan, you're going to die, and the server won't listen to your "but I was shielded already" complaint.
</p>
<h2> <span class="mw-headline" id="Why_are_the_clientside_predicted_hooks_called_more_times_than_the_server_ones.3F"> Why are the clientside predicted hooks called more times than the server ones? </span></h2>
<p>Because in order to smooth out the experience the client simulates multiple times at different intervals, interpolating the results.
The client doesn’t send all of them though (it mainly depends on the client’s update rate), usually it only sends the first one ( and <a href="/page/Global/IsFirstTimePredicted" title="Global/IsFirstTimePredicted">IsFirstTimePredicted</a> returns true ), the others are for smoothing.
</p>
<h2> <span class="mw-headline" id="There.E2.80.99s_a_function_called_IsFirstTimePredicted.2C_what_is_it.3F"> There’s a function called <a href="/page/Global/IsFirstTimePredicted" title="Global/IsFirstTimePredicted">IsFirstTimePredicted</a>, what is it? </span></h2>
<p><a href="/page/Global/IsFirstTimePredicted" title="Global/IsFirstTimePredicted">IsFirstTimePredicted</a> returns whether the command from this prediction is going to be sent to the server, if it’s false it means that it’s just one used for smoothing out the simulation, as explained just above.
This always returns true serverside, as of course the server has no need to smooth it out.
</p><p>Predicted variables need to be set regardless if the function returns true or false.
</p><p>The function is already used internally for SendWeaponAnim and EmitSound, so you should only use it to encase effect dispatches like this.
</p>
<pre><code data-language="lua">
function SWEP:PrimaryAttack()
	self:EmitSound( &quot;Weapon_Pistol.Single&quot; )
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self:SetNextPrimaryFire( CurTime() + 0.5 )
	
	if ( IsFirstTimePredicted() ) then
		local effect = EffectData()
		effect:SetOrigin( self:GetOwner():GetEyeTrace().HitPos )
		util.Effect( &quot;Explosion&quot; , effect )
	end
end
</code></pre>
<p>Do <b>NOT</b> use the function like this.
</p>
<pre><code data-language="lua">
-- THIS IS AN EXAMPLE OF WHAT _NOT_ TO DO
function SWEP:PrimaryAttack()
	if ( not IsFirstTimePredicted() ) then return end
	
	self:EmitSound( &quot;Weapon_Pistol.Single&quot; )
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self:SetNextPrimaryFire( CurTime() + 0.5 )
	
	local effect = EffectData()
	effect:SetOrigin( self:GetOwner():GetEyeTrace().HitPos )
	util.Effect( &quot;Explosion&quot; , effect )
end
</code></pre>
<p>This only breaks the prediction on the weapon.
</p>
<h2> <span class="mw-headline" id="This_prediction_stuff_still_doesn.E2.80.99t_explain_why_my_weapon_glitches_out_when_firing_or_when_the_user_lags.21"> This prediction stuff still doesn’t explain why my weapon glitches out when firing or when the user lags!</span></h2>
<p>You're most likely using timers and/or non networked variables for something that should be predicted.
</p><p>You see, with <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a>:<a href="/page/Entity/NetworkVar" title="Entity/NetworkVar">NetworkVar</a> the variables will be restored when there's any prediction error.
</p><p>This does <b>NOT</b> happen if you use variables such as self.NextFire, which are most likely cause for your prediction errors.
</p>
<h2> <span class="mw-headline" id="So.2C_can_I_still_use_timer.Simple_for_my_burst_fire.3F"> So, can I still use timer.Simple for my burst fire? </span></h2>
<p>No , you really shouldn't, just do your logic inside of the weapon’s Think hook instead.
Timers are not reliable at all during prediction, and they wouldn't be restored when the server tells you what’s wrong during a prediction error.
</p><p>Also lag compensation <b>does not work</b> in a timer, so there's another reason why you shouldn't do that.
</p><p>For instance, here's how you'd replace a timer for an idle animation.
</p>
<pre><code data-language="lua">
function SWEP:SetupDataTables()
	self:NetworkVar( &quot;Float&quot; , 0 , &quot;NextIdle&quot; )
end

function SWEP:Initialize()
	self:SetNextIdle( 0 )
end

function SWEP:PrimaryAttack()
	self:SetNextPrimaryFire( CurTime() + 1 )
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self:SetNextIdle( CurTime() + self:SequenceDuration() )
end


function SWEP:Think()
	if self:GetNextIdle() ~= 0 and self:GetNextIdle() &lt; CurTime() then
		self:SendWeaponAnim( ACT_VM_IDLE )
		self:SetNextIdle( 0 )
	end
end
</code></pre>
<h2> <span class="mw-headline" id="That.27s_stupid.2C_it.27s_redundant_code.2C_timers_are_like_1_line_of_code.21"> That's stupid, it's redundant code, timers are like 1 line of code! </span></h2>
<p>Timers already work like that internally, except in this case they would have prediction support.
</p>
<h2> <span class="mw-headline" id="Isn.27t_it_expensive_to_have_multiple_checks_like_that_in_a_think_hook.3F"> Isn't it expensive to have multiple checks like that in a think hook? </span></h2>
<p>No, comparing two floats is nothing compared to firing a trace in a HUDDraw hook.
</p>
<h2> <span class="mw-headline" id="What_is_SuppressHostEvents.3F"> What is <a href="/page/Global/SuppressHostEvents" title="Global/SuppressHostEvents">SuppressHostEvents</a>? </span></h2>
<p>This function prevents the player from receiving duplicated effects during prediction.
</p><p>When you're doing a weapon attack you're going to emit an effect ( for instance the explosion from the example above ) on both client and server.
</p><p>For other players, these are only going to be sent once, but since the predicting player is also emitting those on his client, the server prevents that from happening by discarding whatever the player is about to send to himself during that attack.
</p><p>However, this can also be done using the <a href="/page/Category_colon_CRecipientFilter" title="Category:CRecipientFilter">CRecipientFilter</a> feature of <a href="/page/Category_colon_util" title="Category:util">util</a>.<a href="/page/util/Effect" title="util/Effect">Effect</a>, adding the players by PVS and only removing the owner of the weapon on the server.
</p><p><b><a href="/page/Global/SuppressHostEvents" title="Global/SuppressHostEvents">SuppressHostEvents</a> already encases predicted weapon calls such as <a href="/page/Category_colon_WEAPON_Hooks" title="Category:WEAPON Hooks">WEAPON</a>:<a href="/page/WEAPON/PrimaryAttack" title="WEAPON/PrimaryAttack">PrimaryAttack</a> and <a href="/page/Category_colon_WEAPON_Hooks" title="Category:WEAPON Hooks">WEAPON</a>:<a href="/page/WEAPON/Think" title="WEAPON/Think">Think</a>, and you shouldn't need to use it.</b>
</p>
<h2> <span class="mw-headline" id="What_should_be_called_serverside_and_what_shouldn.E2.80.99t_with_prediction.3F"> What should be called serverside and what shouldn’t with prediction? </span></h2>
<p>This depends mostly on what you’re doing, if you’re creating an entity, that should obviously be only serverside.
</p><p>If you’re affecting other entities like doors and other players then that should be serverside as well.
</p><p>If you’re affecting an entity that has <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a>:<a href="/page/Entity/SetPredictable" title="Entity/SetPredictable">SetPredictable</a> enabled (which is the normal case for weapons, and entities used in the drive system garry made), such as modifying the internal or custom DT vars then that should be shared.
</p>
<h2> <span class="mw-headline" id="Useful_commands"> Useful commands </span></h2>
<ul><li> cl_showerror (doesn’t require cheats, takes 0,1,2)
</li></ul>
<p>Shows prediction errors caused by an entity, setting it to 1 shows the messages on the player’s hud on the top right (where the old Lua errors hud used to be).
Setting it to 2 is what you generally want, it enables the printing of the error, the affected variable and the difference from the server.
</p>
<ul><li> cl_predictionlist (requires cheats, takes 0 or 1)
</li></ul>
<p>Shows all the entities currently being predicted on the client, entity index, classname and it's origin ( either predicted or client created)
It's not that useful alone though.
</p>
<ul><li> cl_pdump (requires cheats, takes an entity index number)
</li></ul>
<p>Shows all the dt vars currently being networked to the client, there's a legend on the bottom right.
</p>
<h2> <span class="mw-headline" id="Prediction_examples"> Prediction examples </span></h2>
<p>There will be some prediction examples linked down below at some point.
This will be filled when I get some good examples.
</p><p>For movement related stuff, read the <a href="/page/Game_Movement" title="Game Movement">Game Movement</a> page
</p>


