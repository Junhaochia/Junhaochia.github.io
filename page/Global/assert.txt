<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>assert( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=assert">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/Global/assert" title="Special:WhatLinksHere/Global/assert">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">5</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Returns_2"><span class="tocnumber">6</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Returns_3"><span class="tocnumber">7</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">8</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">8.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">9</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">9.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_3"><span class="tocnumber">10</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_3"><span class="tocnumber">10.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>If the result of the first argument is false or nil, an error is thrown with the second argument as the message.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_any" title="Category:any">any</a> expression</span>
</p>
<div style="margin-left: 32px;">
The expression to assert.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> errorMessage="assertion failed!"</span>
</p>
<div style="margin-left: 32px;">
The error message to throw when assertion fails. This is only type-checked if the assertion fails.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_vararg" title="Category:vararg">vararg</a> returns=nil</span>
</p>
<div style="margin-left: 32px;">
Any arguments past the error message will be returned by a successful assert.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_any" title="Category:any">any</a></span>
</p>
<div style="margin-left: 32px;">
If successful, returns the first argument.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns_2">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_any" title="Category:any">any</a></span>
</p>
<div style="margin-left: 32px;">
<p>If successful, returns the error message. This will be nil if the second argument wasn't specified.
</p>
Since the second argument is only type-checked if the assertion fails, this doesn't have to be a string.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns_3">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_vararg" title="Category:vararg">vararg</a></span>
</p>
<div style="margin-left: 32px;">
Returns any arguments past the error message.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>The assertion is successful, and the result of the first argument is returned.
</p>
<pre><code data-language="lua">local ABC = assert(print)
print(ABC)</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">function: builtin#25</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Since the first argument evaluates to false, an error is thrown.
</p>
<pre><code data-language="lua">assert(print == 1, &quot;print is not equal to 1!&quot;)</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">[ERROR] lua_run:1: print is not equal to 1!</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_3">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_3">Example</span></h2>
<p>Examples of return behaviour.
</p>
<pre><code data-language="lua">print(assert(5))
print(assert(true, &quot;foo&quot;, 2, {}))</code></pre>
<p><b>Output:</b>
</p>
<pre class="plain">5
true	foo	2	table: 0x36409278</code></pre>


