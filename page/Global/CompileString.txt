<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>CompileString( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=CompileString">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/Global/CompileString" title="Special:WhatLinksHere/Global/CompileString">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">5</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Returns_2"><span class="tocnumber">6</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">8</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">8.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_3"><span class="tocnumber">9</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_3"><span class="tocnumber">9.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>This function will compile the code argument as lua code and return a function that will execute that code.
</p><p>Please note that this function will not automatically execute the given code after compiling it.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> code</span>
</p>
<div style="margin-left: 32px;">
The code to compile.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a> identifier</span>
</p>
<div style="margin-left: 32px;">
An identifier in case an error is thrown. (The same identifier can be used multiple times)</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_boolean" title="Category:boolean">boolean</a> HandleError=true</span>
</p>
<div style="margin-left: 32px;">
If false this function will return an error string instead of throwing an error.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_function" title="Category:function">function</a></span>
</p>
<div style="margin-left: 32px;">
A function that, when called, will execute the given code. Returns nil if there was an error.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns_2">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a></span>
</p>
<div style="margin-left: 32px;">
The error string. Will be nil if there were no errors or the function handles errors (third argument is true).</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Code that will not compile, with ErrorHandling set to false.
</p>
<pre><code data-language="lua">local code = &quot;MsgN('Hi)&quot;
local func = CompileString(code, &quot;TestCode&quot;, false)
MsgN(func)</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">TestCode:1: unfinished string near '&lt;eof&gt;' (this is not a script error - it is a returned string)</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Code that will compile.
</p>
<pre><code data-language="lua">local code = &quot;MsgN('Hi')&quot;
local func = CompileString(code, &quot;TestCode&quot;)

if func then -- Compile String returns nil if 3rd argument is true and code has errors.
   func()
end</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">Hi</div>
<p><br />
</p>
<h1 class="first_example"> <span class="mw-headline" id="Examples_3">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_3">Example</span></h2>
<p>Compiled code with custom arguments; captured with the varargs identifier.
</p>
<pre><code data-language="lua">local code = [[
	local args = { ... } 
	print( unpack( args ) )
	print( args[ 2 ] + args[ 3 ])
	print( args[ 4 ] .. args[ 5 ])

	local first, second = ...
	print( first, second )
]]
local func = CompileString( code, &quot;VarargCodeTest&quot; )
func( 1, 2, 3, &quot;A&quot;, &quot;B&quot;, &quot;C&quot; )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><pre><code data-language="lua">1	2	3	A	B	C
5
AB
1   2</code></pre></div>


