<div class="function_line">
<span class="client" title="Client">&#160;</span>ENTITY:GetRenderMesh( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=ENTITY.GetRenderMesh">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/ENTITY/GetRenderMesh" title="Special:WhatLinksHere/ENTITY/GetRenderMesh">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">2</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">3.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Specify a mesh that should be rendered instead of this SENT's model.
</p>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a></span>
</p>
<div style="margin-left: 32px;">
<p>A table containing the following keys:
</p>
<ul><li><a href="/page/Category_colon_IMesh" title="Category:IMesh">IMesh</a> Mesh - Required
</li><li><a href="/page/Category_colon_IMaterial" title="Category:IMaterial">IMaterial</a> Material - Required
</li><li><a href="/page/Category_colon_VMatrix" title="Category:VMatrix">VMatrix</a> Matrix - Optional</div>
</li></ul>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>A box that renders nicely with ambient lighting, projected textures, and bumpmaps. Performed in the most lines of code possible.
</p>
<pre><code data-language="lua">AddCSLuaFile()

DEFINE_BASECLASS( &quot;base_anim&quot; )

ENT.PrintName = &quot;Other Cube&quot;
ENT.Spawnable = true

ENT.Mins = Vector( -16, -16, -16 )
ENT.Maxs = Vector(  16,  16,  16 )

ENT.Material = Material( &quot;hunter/myplastic&quot; )

function ENT:SpawnFunction( ply, tr, ClassName )
    local ent = ents.Create( ClassName )
    ent:SetPos( tr.HitPos + tr.HitNormal * 32 )
    ent:Spawn()
    return ent
end

function ENT:Initialize()
    if CLIENT then
        self:CreateMesh()
        self:SetRenderBounds( self.Mins, self.Maxs )
    end

    self:DrawShadow( false )
end

function ENT:GetRenderMesh()
    return { Mesh = self.Mesh, Material = self.Material }
end

function ENT:CreateMesh()
    self.Mesh = Mesh()

    local positions = {
        Vector( -0.5, -0.5, -0.5 ),
        Vector(  0.5, -0.5, -0.5 ),
        Vector( -0.5,  0.5, -0.5 ),
        Vector(  0.5,  0.5, -0.5 ),
        Vector( -0.5, -0.5,  0.5 ),
        Vector(  0.5, -0.5,  0.5 ),
        Vector( -0.5,  0.5,  0.5 ),
        Vector(  0.5,  0.5,  0.5 ),
    };

    local indices = {
        1, 7, 5,
        1, 3, 7,
        6, 4, 2,
        6, 8, 4,
        1, 6, 2,
        1, 5, 6,
        3, 8, 7,
        3, 4, 8,
        1, 4, 3,
        1, 2, 4,
        5, 8, 6,
        5, 7, 8,
    }

    local normals = {
       Vector( -1,  0,  0 ),
       Vector(  1,  0,  0 ),
       Vector(  0, -1,  0 ),
       Vector(  0,  1,  0 ),
       Vector(  0,  0, -1 ),
       Vector(  0,  0,  1 ),
    }

    local tangents = {
        { 0, 1, 0, -1 },
        { 0, 1, 0, -1 },
        { 0, 0, 1, -1 },
        { 1, 0, 0, -1 },
        { 1, 0, 0, -1 },
        { 0, 1, 0, -1 },
    }

    local uCoords = {
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
    }

    local vCoords = {
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
    }

    local verts = {}
    local scale = self.Maxs - self.Mins

    for vert_i = 1, #indices do
        local face_i = math.ceil( vert_i / 6 )

        verts[vert_i] = {
            pos = positions[indices[vert_i]] * scale,
            normal = normals[face_i],
            u = uCoords[vert_i],
            v = vCoords[vert_i],
            userdata = tangents[face_i]
        }
    end
    
    self.Mesh:BuildFromTriangles( verts )
end</code></pre>
<p><br />
</p>


