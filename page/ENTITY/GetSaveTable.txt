<div class="function_line">
<span class="shared" title="Shared">&#160;</span>Entity&#58;GetSaveTable( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=Entity.GetSaveTable">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/Entity/GetSaveTable" title="Special:WhatLinksHere/Entity/GetSaveTable">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">3</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">4.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_3"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_3"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Returns a table of save values for an entity.
</p><p>These tables are not the same between the client and the server, and different entities may have different fields.
</p><p>You can get the list different fields an entity has by looking at it's source code ( the 2013 SDK can be found online, <a rel="nofollow" class="external free" href="https://github.com/ValveSoftware/source-sdk-2013">https://github.com/ValveSoftware/source-sdk-2013</a> ). Accessible fields are defined by each DEFINE_FIELD and DEFINE_KEYFIELD inside the DATADESC block.
</p><p>Take the headcrab, for example:
</p>
<pre><code data-language="lua">BEGIN_DATADESC( CBaseHeadcrab )
	// m_nGibCount - don't save
	DEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),
	DEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),
	DEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),
	DEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),
	
	DEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, &quot;startburrowed&quot; ),
	DEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),
	DEFINE_FIELD( m_nContext, FIELD_INTEGER ),
	DEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),
	DEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),
		
	DEFINE_INPUTFUNC( FIELD_VOID, &quot;Burrow&quot;, InputBurrow ),
	DEFINE_INPUTFUNC( FIELD_VOID, &quot;BurrowImmediate&quot;, InputBurrowImmediate ),
	DEFINE_INPUTFUNC( FIELD_VOID, &quot;Unburrow&quot;, InputUnburrow ),
	DEFINE_INPUTFUNC( FIELD_VOID, &quot;StartHangingFromCeiling&quot;, InputStartHangingFromCeiling ),
	DEFINE_INPUTFUNC( FIELD_VOID, &quot;DropFromCeiling&quot;, InputDropFromCeiling ),
	
	// Function Pointers
	DEFINE_THINKFUNC( EliminateRollAndPitch ),
	DEFINE_THINKFUNC( ThrowThink ),
	DEFINE_ENTITYFUNC( LeapTouch ),
END_DATADESC()
</code></pre>
<p>For each <b>DEFINE_FIELD</b>, the save table will have a key with name of <b>first</b> argument.
</p><p>For each <b>DEFINE_KEYFIELD</b>, the save table will have a key with name of the <b>third</b> argument.
</p><p>See <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a>:<a href="/page/Entity/GetInternalVariable" title="Entity/GetInternalVariable">GetInternalVariable</a> for only retrieving one key of the save table.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_boolean" title="Category:boolean">boolean</a> showAll</span>
</p>
<div style="margin-left: 32px;">
If set, shows all variables, not just the ones for save.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a></span>
</p>
<div style="margin-left: 32px;">
<p>A table containing all save values in key/value format.
</p>
The value may be a sequential table (starting with 1) if the field in question is an array in engine.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Get how long it has been since the player was damaged
</p>
<pre><code data-language="lua">local meta = FindMetaTable( &quot;Player&quot; )

function meta:GetLastDamageTime()
	return self:GetSaveTable().m_flLastDamageTime
end

print( Entity( 1 ):GetLastDamageTime() )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">-31.965000152588</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Determine if a door is locked (only works on server side otherwise returns nil)
</p>
<pre><code data-language="lua">function IsDoorLocked(ent)
	return ent:GetSaveTable().m_bLocked
end</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">returns true if the door is locked</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_3">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_3">Example</span></h2>
<p>Function <i>DoorIsOpen( door )</i> that returns whether a door is open or not, for different door classes
</p>
<pre><code data-language="lua">local TestingFunctions = {
	[&quot;func_door&quot;] = function( self )
		return ( self:GetSaveTable().m_toggle_state == 0 )
	end,
	[&quot;func_door_rotating&quot;] = function( self )
		return ( self:GetSaveTable().m_toggle_state == 0 )
	end,
	[&quot;prop_door_rotating&quot;] = function( self )
		return ( self:GetSaveTable().m_eDoorState ~= 0 )
	end,
}
function DoorIsOpen( door )
	local func = TestingFunctions[door:GetClass()]
	if func then
		return func( door )
	end
end</code></pre>
<p><br />
</p>


