<div class="function_line">
<span class="shared_m" title="Shared and Menu">&#160;</span>debug.getupvalue( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=debug.getupvalue">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/debug/getupvalue" title="Special:WhatLinksHere/debug/getupvalue">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Returns"><span class="tocnumber">4</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Returns_2"><span class="tocnumber">5</span> <span class="toctext">Returns</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Used for getting variable values in an index from the passed function. This does nothing for C functions.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_function" title="Category:function">function</a> func</span>
</p>
<div style="margin-left: 32px;">
Function to get the upvalue indexed from.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> index</span>
</p>
<div style="margin-left: 32px;">
The index in the upvalue array. The max number of entries can be found in <a href="/page/Category_colon_debug" title="Category:debug">debug</a>.<a href="/page/debug/getinfo" title="debug/getinfo">getinfo</a>'s "<a href="/page/Structures/DebugInfo" title="Structures/DebugInfo">nups</a>" key.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_string" title="Category:string">string</a></span>
</p>
<div style="margin-left: 32px;">
Name of the upvalue. Will be nil if the index was out of range (&lt; 1 or &gt; <a href="/page/Category_colon_debug" title="Category:debug">debug</a>.<a href="/page/debug/getinfo" title="debug/getinfo">getinfo</a>.nups), or the function was defined in C.</div>
</div>
<h1 class="first_ret"> <span class="mw-headline" id="Returns_2">Returns</span></h1>
<div class="return" style="counter-increment: returns;">
<p><span class="ret_number" style="counter-increment: returns -1;"></span> <span class="ret_chunk"><a href="/page/Category_colon_any" title="Category:any">any</a></span>
</p>
<div style="margin-left: 32px;">
Value of the upvalue.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Prints the upvalues of some local functions.
</p>
<pre><code data-language="lua">local foo = 5
local bar = &quot;hello&quot;
local test = { &quot;table&quot;, true, &quot;variable&quot; }

local function DoSomethingWithFoo()
	-- This code won't be run but the function
	-- has to reference the variable for
	-- it to be counted as an upvalue
	foo = foo + 1
end

local function DoSomethingWithFooAndBar()
	foo = foo / 2
	bar = bar .. &quot; world&quot;
end

local function DoSomethingWithBarAndTest()
	test[1] = bar .. &quot;reader!&quot;
end


-- level = stack level to get local variables of
-- returns a table with [[:Category:string|string]] keys representing the variable name
local function GetUpvalues( func )
	local info = debug.getinfo( func, &quot;uS&quot; )
	local variables = {}

	-- Upvalues can't be retrieved from C functions
	if ( info&#160;!= nil &amp;&amp; info.what == &quot;Lua&quot; ) then
		local upvalues = info.nups

		for i = 1, upvalues do
			local key, value = debug.getupvalue( func, i )
			variables[ key ] = value
		end
	end

	return variables
end

print( &quot;DoSomethingWithFoo:&quot; )
PrintTable( GetUpvalues( DoSomethingWithFoo ) )

print( &quot;\nDoSomethingWithFooAndBar:&quot; )
PrintTable( GetUpvalues( DoSomethingWithFooAndBar ) )

print( &quot;\nDoSomethingWithBarAndTest:&quot; )
PrintTable( GetUpvalues( DoSomethingWithBarAndTest ) )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><pre><code data-language="lua">DoSomethingWithFoo:
foo	=	5

DoSomethingWithFooAndBar:
bar	=	hello
foo	=	5

DoSomethingWithBarAndTest:
bar	=	hello
test:
		1	=	table
		2	=	true
		3	=	variable</code></pre></div>


