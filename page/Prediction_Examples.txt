<div class="markedfordeletion"><span>This page has been nominated for deletion.</span></div>
<p>I'll assume you've already read the <a href="/page/Prediction" title="Prediction">Prediction</a> page and you've got a vague idea of what it is, most of these prediction examples assume you already know the base of coding a weapon/entity and know what the drive system is.
</p><p>This page is here to make use of that giant wall of text and to explain what the heck is going on in practice.
</p><p>The main principle of prediction as explained earlier is to have a simulation of what's going to happen before the server does, aka you just call everything <b>shared</b>( with a few exceptions ).
</p><p>If it wasn't clear enough, prediction breaks easily, and in case of entities ( and weapons ) only one can be predicted by a player at any time.
</p><p>Now, using normal variables is fine, but in case of prediction they're not sufficient because of prediction errors.
</p><p>In which case you have to use <a href="/page/Networking_Entities" title="Networking Entities">Network Vars</a> ( called dt vars internally ) , all the engine entities use these for networking and prediction.
</p><p>In fact, if you've made a scripted weapon before, chances are you're already using them, functions such as <a href="/page/Category_colon_Weapon" title="Category:Weapon">Weapon</a>:<a href="/page/Weapon/SetNextPrimaryFire" title="Weapon/SetNextPrimaryFire">SetNextPrimaryFire</a> , <a href="/page/Category_colon_Player" title="Category:Player">Player</a>:<a href="/page/Player/RemoveAmmo" title="Player/RemoveAmmo">RemoveAmmo</a> access predicted DT vars, defined in the engine.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>Can't stress this enough, due to prediction all the functions shown here are defined on both states, sans a few exceptions.
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>I'm not going to add all the SWEP/ENT variables here, this is merely an example.
</p>
</td></tr></table>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Weapon_Prediction"><span class="tocnumber">1</span> <span class="toctext">Weapon Prediction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Movement_Prediction"><span class="tocnumber">2</span> <span class="toctext">Movement Prediction</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Entity_Prediction"><span class="tocnumber">3</span> <span class="toctext">Entity Prediction</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Drive_System_Prediction"><span class="tocnumber">4</span> <span class="toctext">Drive System Prediction</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Emitting_Sounds_during_prediction"><span class="tocnumber">5</span> <span class="toctext">Emitting Sounds during prediction</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Weapon_Prediction"> Weapon Prediction </span></h1>
<p>This is pretty straight forward, to start with, you'll define your needed Network vars as explained in the page above.
</p>
<pre>

--TODO

function SWEP:SetupDataTables()
end

function SWEP:Think()
end

function SWEP:PrimaryAttack()
end

</pre>
<h1> <span class="mw-headline" id="Movement_Prediction"> Movement Prediction </span></h1>
<p>As good as the drive system might be, with the way it's coded it only allows for one movement override at a time.
</p><p>Directly hooking the movement hooks allows us to modify the behaviour and make it somewhat compatible with others.
</p><p>Now, it's best to actually couple this with a predicted entity ( such as a weapon, or look below for another example ), seeing as for instance, on a jetpack we may want to handle fuel.
</p><p>Saving variables onto the player ( entity specific stuff such as fuel, entity references are fine ) should only used as a last resort, especially if it can be avoided.
</p>
<pre>

hook.Add( &quot;Move&quot; , &quot;Movehook test&quot;, function( ply , mv )

end)

</pre>
<h1> <span class="mw-headline" id="Entity_Prediction"> Entity Prediction </span></h1>
<p>Note, this stuff is kind of advanced
</p><p>This kind of prediction is already used internally for weapons, but here we can have more freedom, such as being able to create a weapon-like entity that can be used at anytime.
</p><p>The way we're gonna do the prediction is to run the logic in the Player's Tick hook, and not trough the entity's Think.
</p><p>To actually mark an entity as predictable, and allow DT vars to be restored on a prediction error, we need to use <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a>:<a href="/page/Entity/SetPredictable" title="Entity/SetPredictable">SetPredictable</a> on the client that we want to enable prediction on.
</p><p>There's currently no getter to know if an entity is already predictable, and we need it to avoid the DT variables from being reset everytime the function is called, so excuse the crude hack below.
</p><p>This is an example for a predicted entity base, which you can derive from or use directly.
</p><p><br />
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>The main checks are done on the controlling player DT var because Set/Get Owner/Parent are used mainly for collisions, and external tools or addons might override them ( for instance the gravity gun sets the owner on anything it holds )
</p>
</td></tr></table>
<pre>
--TODO: link to my github with the predicted entity base
</pre>
<p>This can also be coupled with the movement hooks, allowing us to have predicted jetpacks or other movement modifying entities.
</p>
<h1> <span class="mw-headline" id="Drive_System_Prediction"> Drive System Prediction </span></h1>
<p>This might get considered as a duplicate of Entity Prediction, with the difference being that the drive system is only good to control an entity as if it was a vehicle, nothing can be ran along with the player as of YET.
</p><p>With drive, no player movement logic is ran from the engine, and thus we will need to handle the collisions on our own.
</p><p>Also stuff like enabling prediction on the entity is already handled internally.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is much easier than Entity Prediction as you don't have to do as much stuff as that.
</p>
</td></tr></table>
<p>TODO: Visit <a href="/page/Entity_Driving" title="Entity Driving">Entity_Driving</a> in the mean time.
</p>
<h1> <span class="mw-headline" id="Emitting_Sounds_during_prediction"> Emitting Sounds during prediction </span></h1>
<p>If you've used the predicted entity example you might've noticed that sounds still emit twice, as if prediction didn't cull them.
</p><p>This is actually a problem in the <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a>:<a href="/page/Entity/EmitSound" title="Entity/EmitSound">EmitSound</a> function which will be fixed at some point.
</p>


