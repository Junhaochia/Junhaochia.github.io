<p>The states or so called realms represent different Lua states.
</p><p>There are 3 Lua states in Garry's Mod.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Client"><span class="tocnumber">1</span> <span class="toctext">Client</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Server"><span class="tocnumber">2</span> <span class="toctext">Server</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Menu"><span class="tocnumber">3</span> <span class="toctext">Menu</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Other"><span class="tocnumber">4</span> <span class="toctext">Other</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Client"><span class="client" style="color: white;">Client</span></span></h2>
<p>The <b>Client</b> state is basically your game client. It handles things such as visual rendering. It can communicate with Server state via the <a href="/page/Category_colon_net" title="Category:net">net library</a> as an example. A variable set on <b>Client</b> state cannot be retrieved on Server state without networking it.
</p><p>A common issue is to give the client too much freedom, the client should only respond to what the server tells it, and not the other way around.
</p>
<h2> <span class="mw-headline" id="Server"><span class="server" style="color: white;">Server</span></span></h2>
<p>The <b>Server</b> state handles things on the server; it's the only state used on Dedicated Servers. This handles things like telling entities what to do, controlling weapons/players and all game logic (what happens when and how in gamemodes). It can communicate with Client state via the <a href="/page/Category_colon_net" title="Category:net">net library</a> as an example. A variable set on <b>Server</b> state cannot be retrieved on <b>Client</b> state without networking it.
</p>
<h2> <span class="mw-headline" id="Menu"><span class="menu" style="color: white;">Menu</span></span></h2>
<p>The <b>Menu</b> state is a hidden and isolated state for the Main Menu. It has some vital functions available to make Main Menu functional and cannot communicate with <b>Client</b> or <b>Server</b> states. Any Lua ran in this state will run regardless of sv_allowcslua.
</p>
<h2> <span class="mw-headline" id="Other"><span class="shared_m" style="color: white;">Other</span></span></h2>
<p>In the wiki you may also see the following pseudo-states:<br />
<span class="shared">&#160;</span> Shared (Client and Server)<br />
<span class="client_m">&#160;</span> Client and Menu<br />
<span class="shared_m">&#160;</span> Shared and Menu (all states - Client, Server and Menu)
</p><p>These are not an actual states, rather, they signify that the function or hook can be executed in each one of the specified states.
</p><p>It doesn't necessarily mean the function/hook will return the same values in the different states, or that it does the same thing. For example, the function <a href="/page/Category_colon_Entity" title="Category:Entity">Entity</a>:<a href="/page/Entity/GetPos" title="Entity/GetPos">GetPos</a> can be called on Server and Client, so it is shared. <a href="/page/Category_colon_undo" title="Category:undo">undo</a>.<a href="/page/undo/GetTable" title="undo/GetTable">GetTable</a> is also a shared function, but it works differently on client and server as explained in its description. The <a href="/page/Category_colon_math" title="Category:math">math library</a> and <a href="/page/Category_colon_string" title="Category:string">string library</a> on the other hand can be used in all 3 states.
</p>


