<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#About"><span class="tocnumber">1</span> <span class="toctext">About</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#CurTime"><span class="tocnumber">2</span> <span class="toctext">CurTime</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Timers"><span class="tocnumber">3</span> <span class="toctext">Timers</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Real_World_Time"><span class="tocnumber">4</span> <span class="toctext">Real World Time</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="About"> About </span></h1>
<p>A cooldown will make an event only trigger if a certain amount of time has passed since its last occurrence.
</p><p>An event cooldown can be created in several ways, and it is made by setting a condition based on time
</p>
<pre><code data-language="lua">function myFunc()
	if funcNotOnCooldown then
		-- Do stuff
	end
end</code></pre>
<h1> <span class="mw-headline" id="CurTime"> CurTime </span></h1>
<p><a href="/page/Global/CurTime" title="Global/CurTime">CurTime</a> is a useful tool for setting a delay for an event. The function returns the uptime of the server in seconds, which means we can use it to keep track of time elapsed by saving the returned value, then calling it again.
</p><p>Here's an example of a cooldown made using CurTime
</p>
<pre><code data-language="lua">local delay = 2
local lastOccurance = -delay -- Ensure the first trigger attempt will work
local function myFunc()
	local timeElapsed = CurTime() - lastOccurance
	if timeElapsed &lt; delay then -- If the time elapsed since the last occurance is less than 2 seconds
		print( &quot;The event is on cooldown and has not been triggered&quot; )
	else
		print( &quot;The event has been triggered!&quot; )
		lastOccurance = CurTime()
	end
end</code></pre>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>If your event isn't related to in-game events; consider using <a href="/page/Global/RealTime" title="Global/RealTime">RealTime</a> instead, which will always be synced to real-world time rather than server time
</p>
</td></tr></table>
<p><br />
</p><p>In the above example, we use <a href="/page/Global/CurTime" title="Global/CurTime">CurTime</a> to tell when the last event had occured. Instead, we could use it to determine when the <b>next</b> event should occur
</p>
<pre><code data-language="lua">local delay = 5
local nextOccurance = 0

local function myFunc()
	local timeLeft = nextOccurance - CurTime()
	if timeLeft &lt; 0 then -- If the time has passed the nextOccurance time
		print( &quot;The event has been triggered!&quot; )
		nextOccurance = CurTime() + delay
	end
end</code></pre>
<h1> <span class="mw-headline" id="Timers"> Timers </span></h1>
<p>Another method of setting a delay is using the <a href="/page/Category_colon_timer" title="Category:timer">timer library</a>.
</p>
<pre><code data-language="lua">local delay = 2
local shouldOccur = true

local function myFunc()
	if shouldOccur then
		print( &quot;The event has been triggered!&quot; )
		shouldOccur = false
		timer.Simple( delay, function() shouldOccur = true end )
	else
		print( &quot;The event is still on cooldown&quot; )
	end
end</code></pre>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>If you would like to know how much time is left until the timer ends, use <a href="/page/Category_colon_timer" title="Category:timer">timer</a>.<a href="/page/timer/Create" title="timer/Create">Create</a>
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>It is recommended to not use timers inside hooks that run every frame/tick such as <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/Think" title="GM/Think">Think</a> and <a href="/page/Category_colon_GM_Hooks" title="Category:GM Hooks">GM</a>:<a href="/page/GM/HUDPaint" title="GM/HUDPaint">HUDPaint</a>
</p>
</td></tr></table>
<h1> <span class="mw-headline" id="Real_World_Time"> Real World Time </span></h1>
<p>If you're dealing with long cooldowns, that should persist between map changes and even server restarts, you'll need to use real world time to set the cooldown. We can use real world time with <a href="/page/Category_colon_os" title="Category:os">os</a>.<a href="/page/os/time" title="os/time">time</a> and <a href="/page/Category_colon_os" title="Category:os">os</a>.<a href="/page/os/date" title="os/date">date</a>
</p><p>There are different ways to save information between map changes and server restarts. In the following example I'll be using the <a href="/page/Category_colon_cookie" title="Category:cookie">cookie library</a> to set a 24-hour cooldown on my function
</p>
<pre><code data-language="lua">local cooldown = 86400 -- 24 hours in seconds (24*60*60)

local function myFunc()
	local nextUse = cookie.GetNumber( &quot;myFuncNextUse&quot;, 0 )
	local time = os.time()

	if time &lt; nextUse then
		print( &quot;The event is on cooldown and has not been triggered&quot; )
		local nextUseString = os.date( &quot;%Y/%m/%d -&#160;%H:%M:%S&quot; , nextUse ) -- Format the next use time nicely
		print( &quot;The event will be available for use again on: &quot; .. nextUseString )
	else
		print( &quot;The event has been successfully triggered!&quot; )
		cookie.Set( &quot;myFuncNextUse&quot;, time + cooldown )
	end
end</code></pre>


