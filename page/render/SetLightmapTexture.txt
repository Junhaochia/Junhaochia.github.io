<div class="function_line">
<span class="client" title="Client">&#160;</span>render.SetLightmapTexture( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=render.SetLightmapTexture">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/render/SetLightmapTexture" title="Special:WhatLinksHere/render/SetLightmapTexture">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">3.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is a rendering function that requires a 3D rendering context.<br />This means that it will only work in <a href="/page/Category_colon_3D_Rendering_Hooks" title="Category:3D Rendering Hooks">hooks with a 3D rendering context</a>.
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is a rendering function that requires a 2D rendering context.<br />This means that it will only work in <a href="/page/Category_colon_2D_Rendering_Hooks" title="Category:2D Rendering Hooks">hooks with a 2D rendering context</a>.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_ITexture" title="Category:ITexture">ITexture</a> tex</span>
</p>
<div style="margin-left: 32px;">
The texture to be used as the lightmap.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Creates a mesh with LightmappedGeneric material on it
</p>
<pre><code data-language="lua">-- LightmappedGeneric material that we'll use for our mesh
local meshMat = Material( &quot;concrete/concretefloor001a&quot; )

-- Mesh vertices (notice that it's not MeshVertex structure format, just something similar)
-- Notice that we have 2 UV coordinates channels, one for texture, one for lightmap
local meshVertices = {

	{ pos = Vector( 0, 0, 0 ), u0 = 0, v0 = 0, u1 = 0, v1 = 0, n = Vector( 1, 0, 0 ) },
	{ pos = Vector( 0, 100, 0 ), u0 = 1, v0 = 0, u1 = 3, v1 = 0, n = Vector( 1, 0, 0 ) },
	{ pos = Vector( 0, 100, -100 ), u0 = 1, v0 = 1, u1 = 3, v1 = 3, n = Vector( 1, 0, 0 ) },
	{ pos = Vector( 0, 0, -100 ), u0 = 0, v0 = 1, u1 = 0, v1 = 3, n = Vector( 1, 0, 0 ) },
}

-- Run this command while ingame to create the mesh at map origin
concommand.Add( &quot;meshtest&quot;, function()

	-- Creating a render target to be used as lightmap texture
	meshLightmap = GetRenderTarget( &quot;test_mesh_lightmap&quot;, 128, 128, false )

	-- Filling the lightmap texture with some stuff for visualization
	render.PushRenderTarget( meshLightmap )

		cam.Start2D()

			-- Resetting lightmap to be monotone gray
			render.Clear( 128, 128, 128, 255 )

			-- Drawing a dark rectangle
			render.SetColorMaterial()
			surface.SetDrawColor( 80, 80, 80, 255 )
			surface.DrawRect( 32, 32, 64, 64 )

			-- And some color text, why not! Lightmaps support RGB color
			draw.SimpleText( &quot;This is lightmap&quot;, &quot;DermaDefault&quot;, 64, 64, Color( 255, 0, 0, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

		cam.End2D()

	render.PopRenderTarget()

	-- Creating the mesh. Don't forget to pass the material you're gonna use with it!
	-- Shader of the material defines some features of the mesh, vertex structure
	-- specifically (LightmappedGeneric requires each vertex to store 2 UV channels,
	-- for instance. This is important in this case)
	myTestMesh = Mesh( meshMat )

	-- Creating the mesh
	mesh.Begin( myTestMesh, MATERIAL_QUADS, 1 )

		for i, vertex in pairs( meshVertices ) do

			mesh.Position( vertex.pos )

			-- Texture coordinates go to channel 0
			mesh.TexCoord( 0, vertex.u0, vertex.v0 )

			-- Lightmap texture coordinates go to channel 1
			mesh.TexCoord( 1, vertex.u1, vertex.v1 )

			mesh.Normal( vertex.n )
			mesh.AdvanceVertex()
		end

	mesh.End()
end )

hook.Add( &quot;PostDrawOpaqueRenderables&quot;, &quot;LightmappedMeshTest&quot;, function()

	if myTestMesh and myTestMesh ~= NULL then

		render.SetMaterial( meshMat )
		render.SetLightmapTexture( meshLightmap )

		myTestMesh:Draw()
	end
end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><div class="thumb tleft"><div class="thumbinner" style="width:514px;"><a href="/page/File:LightmappedGenericMeshPreview.jpeg" class="image"><img alt="LightmappedGenericMeshPreview.jpeg" src="/images/thumb/8/80/LightmappedGenericMeshPreview.jpeg/512px-LightmappedGenericMeshPreview.jpeg" width="512" height="288" class="thumbimage" /></a> <div class="thumbcaption"><div class="magnify"><a href="/page/File:LightmappedGenericMeshPreview.jpeg" class="internal" title="Enlarge"><img src="/skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div></div></div></div></div>


