<div class="function_line">
<span class="client" title="Client">&#160;</span>render.SetStencilWriteMask( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=render.SetStencilWriteMask">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/render/SetStencilWriteMask" title="Special:WhatLinksHere/render/SetStencilWriteMask">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">3.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">4.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> mask</span>
</p>
<div style="margin-left: 32px;">
The mask bitflag.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>A brief demonstration of masks
</p>
<pre><code data-language="lua">hook.Add( &quot;PostDrawOpaqueRenderables&quot;, &quot;Stencil Tutorial Example&quot;, function()
	--[[
        To understand this tutorial you need to already understand the basics
         of binary and bitwise operations.

        It would also help to understand hexadecimal notation, since Lua
         doesn't have a bitmask input, but I will include binary notation in
         comments to help.
	--]]

	-- Reset everything to known good
	-- render.SetStencilWriteMask( 0xFF )
	-- render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Force everything to fail
	render.SetStencilCompareFunction( STENCIL_NEVER )
	-- Save all the things we don't draw
	render.SetStencilFailOperation( STENCIL_REPLACE )

	-- Set the reference value to 00011100
	render.SetStencilReferenceValue( 0x1C )
	-- Set the write mask to 01010101
	-- Any writes to the stencil buffer will be bitwise ANDed with this mask.
	-- With our current reference value, the result will be 00010100.
	render.SetStencilWriteMask( 0x55 )

	-- Fail to draw our entities.
	for _, ent in ipairs( ents.FindByClass( &quot;sent_stencil_test&quot; ) ) do
		ent:DrawModel()
	end

	-- Set the test mask to 11110011.
	-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.
	render.SetStencilTestMask( 0xF3 )
	-- Set the reference value to 00011100 &amp; 01010101 &amp; 11110011
	render.SetStencilReferenceValue( 0x10 )
	-- Pass if the masked buffer value matches the unmasked reference value
	render.SetStencilCompareFunction( STENCIL_EQUAL )

	-- Draw our entities
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )</code></pre>
<p><br />
</p>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>A somewhat more complicated mask example
</p>
<pre><code data-language="lua">hook.Add( &quot;PostDrawOpaqueRenderables&quot;, &quot;Stencil Tutorial Example&quot;, function()
	--[[
        To understand this tutorial you need to already understand the basics
         of binary and bitwise operations.

        It would also help to understand hexadecimal notation, since Lua
         doesn't have a bitmask input, but I will include binary notation in
         comments to help.
	--]]

	-- Reset everything to known good
	-- render.SetStencilWriteMask( 0xFF )
	-- render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )

	-- Only write to the upper 4 bits of the stencil buffer
	render.SetStencilWriteMask( 0xF0 )
	-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.
	render.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )

	-- Always fail
	render.SetStencilCompareFunction( STENCIL_NEVER )
	-- Don't read any bits from the stencil buffer
	render.SetStencilTestMask( 0x00 )
	-- When an operation fails, read the current value from the stencil buffer, add
	--  one to it and then write it back to the buffer
	-- This is not affected by the test mask, but it is affected by the write mask
	-- This means we will read 00001111, then write 00010000.
	-- However, due to the write mask, this won't affect the last four bits already
	--  in the buffer, resulting in 00011111.
	render.SetStencilFailOperation( STENCIL_INCR )

	-- Add something interesting to the stencil buffer
	for _, ent in ipairs( ents.FindByClass( &quot;sent_stencil_test&quot; ) ) do
		ent:DrawModel()
	end


	-- Go back to reading the full value from the stencil buffer
	render.SetStencilTestMask( 0xFF )
	-- Set the reference value to 00011111
	render.SetStencilReferenceValue( 0x1F )
	-- Render the result
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )</code></pre>
<p><br />
</p>


