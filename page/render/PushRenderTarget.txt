<div class="function_line">
<span class="client" title="Client">&#160;</span>render.PushRenderTarget( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=render.PushRenderTarget">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/render/PushRenderTarget" title="Special:WhatLinksHere/render/PushRenderTarget">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_4"><span class="tocnumber">5</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_5"><span class="tocnumber">6</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">8</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">8.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.
</p><p>This is similar to a call to <a href="/page/Category_colon_render" title="Category:render">render</a>.<a href="/page/render/SetRenderTarget" title="render/SetRenderTarget">SetRenderTarget</a> and <a href="/page/Category_colon_render" title="Category:render">render</a>.<a href="/page/render/SetViewPort" title="render/SetViewPort">SetViewPort</a> where the current render target and viewport have been saved beforehand, except the viewport isn't clipped to screen bounds.
</p><p>See also <a href="/page/Category_colon_render" title="Category:render">render</a>.<a href="/page/render/PopRenderTarget" title="render/PopRenderTarget">PopRenderTarget</a>.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>If you want to render to the render target in 2d mode and it is not the same size as the screen, use <a href="/page/Category_colon_cam" title="Category:cam">cam</a>.<a href="/page/cam/Start2D" title="cam/Start2D">Start2D</a> and <a href="/page/Category_colon_cam" title="Category:cam">cam</a>.<a href="/page/cam/End2D" title="cam/End2D">End2D</a>.
</p>
</td></tr></table>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call <a href="/page/Category_colon_surface" title="Category:surface">surface</a>.<a href="/page/surface/DisableClipping" title="surface/DisableClipping">DisableClipping</a>
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_ITexture" title="Category:ITexture">ITexture</a> texture</span>
</p>
<div style="margin-left: 32px;">
The new render target to be used.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> x=0</span>
</p>
<div style="margin-left: 32px;">
X origin of the viewport.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> y=0</span>
</p>
<div style="margin-left: 32px;">
Y origin of the viewport.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_4">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> w=texture:Width()</span>
</p>
<div style="margin-left: 32px;">
Width of the viewport.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_5">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> h=texture:Height()</span>
</p>
<div style="margin-left: 32px;">
Height of the viewport</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Shows how to create a material which uses a custom created Render Target texture.
</p>
<pre><code data-language="lua">-- Create render target
local exampleRT = GetRenderTarget( &quot;example_rt&quot;, 1024, 1024 )

-- Draw to the render target
render.PushRenderTarget( exampleRT )
	cam.Start2D()
		-- Draw background
		surface.SetDrawColor( 0, 0, 0, 255 )
		surface.DrawRect( 0, 0, 1024, 1024 )

		-- Draw some foreground stuff
		surface.SetDrawColor( 255, 0, 0, 255 )
		surface.DrawRect( 0, 0, 256, 256 )
	cam.End2D()
render.PopRenderTarget()

local customMaterial = CreateMaterial( &quot;example_rt_mat&quot;, &quot;UnlitGeneric&quot;, {
	[&quot;$basetexture&quot;] = exampleRT:GetName(), -- You can use &quot;example_rt&quot; as well
	[&quot;$translucent&quot;] = 1,
	[&quot;$vertexcolor&quot;] = 1
} )

hook.Add( &quot;HUDPaint&quot;, &quot;ExampleDraw&quot;, function()
	surface.SetDrawColor( 255, 255, 255, 255 )
	surface.SetMaterial( customMaterial )
	surface.DrawTexturedRect( 0, 0, customMaterial:GetTexture( &quot;$basetexture&quot; ):Width(), customMaterial:GetTexture( &quot;$basetexture&quot; ):Height() )
end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">A black 1024x1024 render target with a 256x256 red square in top left corner drawn in your top left corner.</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Shows how you can use alpha channel with render targets.
</p>
<pre><code data-language="lua">render.PushRenderTarget( texture )
render.OverrideAlphaWriteEnable( true, true )

render.ClearDepth()
render.Clear( 0, 0, 0, 0 )

-- Draw stuff here

render.OverrideAlphaWriteEnable( false )
render.PopRenderTarget()</code></pre>
<p><br />
</p>


