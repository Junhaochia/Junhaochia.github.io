<div class="function_line">
<span class="client" title="Client">&#160;</span>render.DrawSprite( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=render.DrawSprite">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/render/DrawSprite" title="Special:WhatLinksHere/render/DrawSprite">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_3"><span class="tocnumber">4</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_4"><span class="tocnumber">5</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">6.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">7</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">7.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Draws a sprite in 3D space.
</p>
<table cellspacing="0" class="gmodwiki_note">
<tr>
<td>NOTE
</td>
<td>
<p>This is a rendering function that requires a 3D rendering context.<br />This means that it will only work in <a href="/page/Category_colon_3D_Rendering_Hooks" title="Category:3D Rendering Hooks">hooks with a 3D rendering context</a>.
</p>
</td></tr></table>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_Vector" title="Category:Vector">Vector</a> position</span>
</p>
<div style="margin-left: 32px;">
Position of the sprite.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> width</span>
</p>
<div style="margin-left: 32px;">
Width of the sprite.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_3">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> height</span>
</p>
<div style="margin-left: 32px;">
Height of the sprite.</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_4">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_table" title="Category:table">table</a> color=Color( 255, 255, 255 )</span>
</p>
<div style="margin-left: 32px;">
Color of the sprite. Uses the <a href="/page/Structures/Color" title="Structures/Color">Color structure</a>.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Draw a sprite at the center of the map
</p>
<pre><code data-language="lua">local pos,material,white = Vector(0,0,0), Material( &quot;sprites/splodesprite&quot; ),Color(255,255,255,255) --Define this sort of stuff outside of loops to make more efficient code.
hook.Add( &quot;HUDPaint&quot;, &quot;paintsprites&quot;, function()
	cam.Start3D() -- Start the 3D function so we can draw onto the screen.
		render.SetMaterial( material ) -- Tell render what material we want, in this case the flash from the gravgun
		render.DrawSprite( pos, 16, 16, white) -- Draw the sprite in the middle of the map, at 16x16 in it's original colour with full alpha.
	cam.End3D()
end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;">An orange star appears at 0,0,0 on the map.</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Function that displays a sprite at the given position, without the need of a specific rendering context
</p><p>draw.VectorSprite(<a href="/page/Category_colon_Vector" title="Category:Vector">Vector</a> position, <a href="/page/Category_colon_number" title="Category:number">number</a> size, <a href="/page/Structures/Color" title="Structures/Color">Color structure</a> color, <a href="/page/Category_colon_boolean" title="Category:boolean">boolean</a> constantSize)
</p>
<pre><code data-language="lua">local toDraw3d = {}
local sprites3d = 0

local toDraw2d = {}
local sprites2d = 0

local material = Material(&quot;sprites/light_ignorez&quot;)

function draw.VectorSprite(position, size, color, constantSize)
	if (not isvector(position)) then
		error(&quot;bad argument #1 to draw.DrawVectorSprite (Vector expected, got &quot; .. type(position) .. &quot;)&quot;)
	end

	if (not isnumber(size)) then
		error(&quot;bad argument #2 to draw.DrawVectorSprite (number expected, got &quot; .. type(size) .. &quot;)&quot;)
	end

	if (not IsColor(color)) then
		error(&quot;bad argument #3 to draw.DrawVectorSprite (Color expected, got &quot; .. type(color) .. &quot;)&quot;)
	end

	local tbl = {position, size, color}

	if (constantSize) then
		sprites2d = sprites2d + 1
		toDraw2d[sprites2d] = tbl
	else
		sprites3d = sprites3d + 1
		toDraw3d[sprites3d] = tbl
	end
end

local render_SetMaterial = render.SetMaterial
local render_DrawSprite = render.DrawSprite
hook.Add(&quot;PreDrawEffects&quot;, &quot;draw.VectorSprite&quot;, function()
	if (sprites3d ~= 0) then
		render_SetMaterial(material)

		for i = 1, sprites3d do
			local info = toDraw3d[i]
			toDraw3d[i] = nil -- Clear the table every frame

			render_DrawSprite(info[1], info[2], info[2], info[3])
		end

		sprites3d = 0
	end
end)

local surface_SetMaterial = surface.SetMaterial
local surface_SetDrawColor = surface.SetDrawColor
local surface_DrawTexturedRect = surface.DrawTexturedRect
hook.Add(&quot;DrawOverlay&quot;, &quot;draw.VectorSprite&quot;, function()
	if (sprites2d ~= 0) then
		surface_SetMaterial(material)

		for i = 1, sprites2d do
			local info = toDraw2d[i]
			toDraw2d[i] = nil

			local pos2d = info[1]:ToScreen()

			if pos2d.visible then
				surface_SetDrawColor(info[3])
				surface_DrawTexturedRect(pos2d.x, pos2d.y, info[2], info[2])
			end
		end

		sprites2d = 0
	end
end)</code></pre>
<p><br />
</p>


