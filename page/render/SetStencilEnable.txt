<div class="function_line">
<span class="client" title="Client">&#160;</span>render.SetStencilEnable( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=render.SetStencilEnable">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/render/SetStencilEnable" title="Special:WhatLinksHere/render/SetStencilEnable">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">3.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Sets whether stencil tests are carried out for each rendered pixel.
</p><p>Only pixels passing the stencil test are written to the render target.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_boolean" title="Category:boolean">boolean</a> newState</span>
</p>
<div style="margin-left: 32px;">
The new state.</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>A basic stencil operation that limits rendering to the centre of the screen
</p>
<pre><code data-language="lua">hook.Add( &quot;PostDrawOpaqueRenderables&quot;, &quot;Stencil Tutorial Example&quot;, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Refuse to write things to the screen unless that pixel's value is 1
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
	local w, h = ScrW() / 3, ScrH() / 3
	local x_start, y_start = w, h
	local x_end, y_end = x_start + w, y_start + h
	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )

	-- Draw our entities. They will only draw in the area cleared above
	for _, ent in pairs( ents.FindByClass( &quot;sent_stencil_test&quot; ) ) do
		ent:DrawModel()
	end

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><div class="thumb tleft"><div class="thumbinner" style="width:402px;"><a href="/page/File:stencil_basic_clipping_result.jpg" class="image"><img alt="stencil basic clipping result.jpg" src="/images/thumb/e/e2/stencil_basic_clipping_result.jpg/400px-stencil_basic_clipping_result.jpg" width="400" height="224" class="thumbimage" /></a> <div class="thumbcaption"><div class="magnify"><a href="/page/File:stencil_basic_clipping_result.jpg" class="internal" title="Enlarge"><img src="/skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div></div></div></div></div>


