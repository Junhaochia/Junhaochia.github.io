<div class="function_line">
<span class="client" title="Client">&#160;</span>render.DepthRange( <span class="function_args"></span> ) </div><div class="gmodwiki_useful_links"><a rel="nofollow" class="external text" href="https://github.com/Facepunch/garrysmod/search?utf8=âœ“&amp;q=render.DepthRange">Search on GitHub</a> - <a href="/page/Special:WhatLinksHere/render/DepthRange" title="Special:WhatLinksHere/render/DepthRange">What links here?</a></div>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Arguments"><span class="tocnumber">2</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Arguments_2"><span class="tocnumber">3</span> <span class="toctext">Arguments</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example"><span class="tocnumber">4.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">5.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Description">Description</span></h1>
<p>Set's the depth range of the upcoming render.
</p>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> depthmin</span>
</p>
<div style="margin-left: 32px;">
The minimum depth of the upcoming render. 0.0 = render normally; 1.0 = render nothing</div>
</div>
<h1 class="first_arg"> <span class="mw-headline" id="Arguments_2">Arguments</span></h1>
<div class="argument">
<p><span class="arg_number"></span> <span class="arg_chunk"><a href="/page/Category_colon_number" title="Category:number">number</a> depthmax</span>
</p>
<div style="margin-left: 32px;">
The maximum depth of the upcoming render. 0.0 = render everything (through walls); 1.0 = render normally</div>
</div>
<h1 class="first_example"> <span class="mw-headline" id="Examples">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example">Example</span></h2>
<p>Perform a downward screen wipe effect on all opaque objects once the client connects.
</p>
<pre><code data-language="lua">local depthmin = 1.0

function GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)

	render.DepthRange(depthmin, 1.0)
	
	if(depthmin &gt; 0.0) then
		depthmin = depthmin - 0.001
	end
	
end</code></pre>
<p><br />
</p>
<h1 class="first_example"> <span class="mw-headline" id="Examples_2">Examples</span></h1>
<h2 class="examples_number"> <span class="mw-headline" id="Example_2">Example</span></h2>
<p>Same effect as above but with a dark shadow skin present where the model is being drawn.
</p>
<pre><code data-language="lua">local depthmin = 1.0
local spawn_copies = {}	-- The shadow copies

function GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)

	render.DepthRange(depthmin, 1.0)
	
	if(!spawn_copies) then return false end
	
	if(depthmin &gt; 0.0) then
		depthmin = depthmin - 0.001
	else
	
		local alpha = 0
		local valid_copies = 0
		
		-- Fade out the shadow copies and remove them
		for _, spawncopy in pairs(spawn_copies) do
			if(IsValid(spawncopy)) then
				alpha = spawncopy:GetColor().a
				if(alpha &gt; 0) then
					spawncopy:SetColor(Color(255, 255, 255, alpha-1))
				else
					spawncopy:Remove()
				end
				valid_copies = valid_copies + 1
			end
		end
		
		-- Nullify table since we aren't using it any more
		if(valid_copies == 0) then
			spawn_copies = nil
		end
			
	end
	
end

function GM:OnEntityCreated(ent)

	if(!spawn_copies) then return end
	
	-- Prevents infinite loop and other errors
	if(ent:GetClass()&#160;!= &quot;class C_BaseFlex&quot; &amp;&amp;
		ent:GetRenderGroup() == RENDERGROUP_OPAQUE &amp;&amp;
		ent:GetClass()&#160;!= &quot;gmod_hands&quot;) then
	
		local mdl = ent:GetModel()
		
		-- Check that the entity is a model and not a brush
		if(mdl &amp;&amp; string.find(mdl, &quot;.mdl&quot;)) then
		
			local spawncopy = ClientsideModel(mdl)
			
			-- A material with $ignorez set to 1 works best here
			spawncopy:SetMaterial(&quot;models/overlay_rendertarget&quot;)
			spawncopy:AddEffects(EF_BONEMERGE)
			spawncopy:SetParent(ent)
			spawncopy:SetRenderMode(RENDERMODE_TRANSALPHA)
			spawncopy:SetColor(Color(255, 255, 255, 92))
			table.insert(spawn_copies, spawncopy)
			
		end
		
	end
	
end</code></pre>
<p><b>Output:</b>
</p>
<div style="margin:2em;"><br /><br /><a href="/page/File:DepthRange_example.webm" title="File:DepthRange example.webm">File:DepthRange example.webm</a></div>


